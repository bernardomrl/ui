{"version":3,"file":"index.cjs288.js","sources":["../node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js"],"sourcesContent":["import { useState } from \"react\";\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * This hook allows a component to support both controlled and uncontrolled\n * states by determining whether the `controlledValue` is provided. If it is\n * undefined, the hook falls back to using the internal state.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param defaultValue The initial value for the uncontrolled state.\n * @param controlledValue The value for the controlled state. If undefined, the\n *   component will use the uncontrolled state.\n * @returns A tuple where the first element is the current value (either\n *   controlled or uncontrolled) and the second element is a setter function to\n *   update the value.\n */\nexport function useControlledValue(defaultValue, controlledValue) {\n    const [uncontrolledValue, setValue] = useState(defaultValue);\n    const value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n    return [value, setValue];\n}\n"],"names":["useControlledValue","defaultValue","controlledValue","uncontrolledValue","setValue","useState"],"mappings":"yGAuBO,SAASA,EAAmBC,EAAcC,EAAiB,CAC9D,KAAM,CAACC,EAAmBC,CAAQ,EAAIC,EAAAA,SAASJ,CAAY,EAE3D,MAAO,CADOC,IAAoB,OAAYC,EAAoBD,EACnDE,CAAQ,CAC3B","x_google_ignoreList":[0]}