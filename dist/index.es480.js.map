{"version":3,"file":"index.es480.js","sources":["../node_modules/lodash/_baseIsTypedArray.js"],"sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n"],"names":["baseGetTag","require$$0","isLength","require$$1","isObjectLike","require$$2","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","value","_baseIsTypedArray"],"mappings":";;;;;;;AAAA,MAAIA,IAAaC,EAAA,GACbC,IAAWC,EAAA,GACXC,IAAeC,EAAA,GAGfC,IAAU,sBACVC,IAAW,kBACXC,IAAU,oBACVC,IAAU,iBACVC,IAAW,kBACXC,IAAU,qBACVC,IAAS,gBACTC,IAAY,mBACZC,IAAY,mBACZC,IAAY,mBACZC,IAAS,gBACTC,IAAY,mBACZC,IAAa,oBAEbC,IAAiB,wBACjBC,IAAc,qBACdC,IAAa,yBACbC,IAAa,yBACbC,IAAU,sBACVC,IAAW,uBACXC,IAAW,uBACXC,IAAW,uBACXC,IAAkB,8BAClBC,IAAY,wBACZC,IAAY,wBAGZC,IAAiB,CAAA;AACrB,EAAAA,EAAeT,CAAU,IAAIS,EAAeR,CAAU,IACtDQ,EAAeP,CAAO,IAAIO,EAAeN,CAAQ,IACjDM,EAAeL,CAAQ,IAAIK,EAAeJ,CAAQ,IAClDI,EAAeH,CAAe,IAAIG,EAAeF,CAAS,IAC1DE,EAAeD,CAAS,IAAI,IAC5BC,EAAexB,CAAO,IAAIwB,EAAevB,CAAQ,IACjDuB,EAAeX,CAAc,IAAIW,EAAetB,CAAO,IACvDsB,EAAeV,CAAW,IAAIU,EAAerB,CAAO,IACpDqB,EAAepB,CAAQ,IAAIoB,EAAenB,CAAO,IACjDmB,EAAelB,CAAM,IAAIkB,EAAejB,CAAS,IACjDiB,EAAehB,CAAS,IAAIgB,EAAef,CAAS,IACpDe,EAAed,CAAM,IAAIc,EAAeb,CAAS,IACjDa,EAAeZ,CAAU,IAAI;AAS7B,WAASa,EAAiBC,GAAO;AAC/B,WAAO5B,EAAa4B,CAAK,KACvB9B,EAAS8B,EAAM,MAAM,KAAK,CAAC,CAACF,EAAe9B,EAAWgC,CAAK,CAAC;AAAA,EAChE;AAEA,SAAAC,IAAiBF;;","x_google_ignoreList":[0]}