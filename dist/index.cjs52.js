"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const b=require("react"),h=require("./index.cjs103.js"),R=require("./index.cjs108.js"),l=require("./index.cjs75.js"),E=require("./index.cjs109.js"),j=require("./index.cjs56.js"),i=require("react/jsx-runtime");function w(e){const o=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const r in e)if(r!=="default"){const t=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(o,r,t.get?t:{enumerable:!0,get:()=>e[r]})}}return o.default=e,Object.freeze(o)}const n=w(b);var x="AlertDialog",[M]=h.createContextScope(x,[l.createDialogScope]),s=l.createDialogScope(),u=e=>{const{__scopeAlertDialog:o,...r}=e,t=s(o);return i.jsx(l.Root,{...t,...r,modal:!0})};u.displayName=x;var q="AlertDialogTrigger",A=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,a=s(r);return i.jsx(l.Trigger,{...a,...t,ref:o})});A.displayName=q;var I="AlertDialogPortal",D=e=>{const{__scopeAlertDialog:o,...r}=e,t=s(o);return i.jsx(l.Portal,{...t,...r})};D.displayName=I;var $="AlertDialogOverlay",v=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,a=s(r);return i.jsx(l.Overlay,{...a,...t,ref:o})});v.displayName=$;var c="AlertDialogContent",[L,F]=M(c),G=j.createSlottable("AlertDialogContent"),f=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,children:t,...a}=e,d=s(r),p=n.useRef(null),T=R.useComposedRefs(o,p),N=n.useRef(null);return i.jsx(l.WarningProvider,{contentName:c,titleName:S,docsSlug:"alert-dialog",children:i.jsx(L,{scope:r,cancelRef:N,children:i.jsxs(l.Content,{role:"alertdialog",...d,...a,ref:T,onOpenAutoFocus:E.composeEventHandlers(a.onOpenAutoFocus,g=>{g.preventDefault(),N.current?.focus({preventScroll:!0})}),onPointerDownOutside:g=>g.preventDefault(),onInteractOutside:g=>g.preventDefault(),children:[i.jsx(G,{children:t}),i.jsx(Y,{contentRef:p})]})})})});f.displayName=c;var S="AlertDialogTitle",m=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,a=s(r);return i.jsx(l.Title,{...a,...t,ref:o})});m.displayName=S;var O="AlertDialogDescription",y=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,a=s(r);return i.jsx(l.Description,{...a,...t,ref:o})});y.displayName=O;var W="AlertDialogAction",_=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,a=s(r);return i.jsx(l.Close,{...a,...t,ref:o})});_.displayName=W;var P="AlertDialogCancel",C=n.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...t}=e,{cancelRef:a}=F(P,r),d=s(r),p=R.useComposedRefs(o,a);return i.jsx(l.Close,{...d,...t,ref:p})});C.displayName=P;var Y=({contentRef:e})=>{const o=`\`${c}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${c}\` by passing a \`${O}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${c}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return n.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(o)},[o,e]),null},k=u,z=A,B=D,H=v,V=f,J=_,K=C,Q=m,U=y;exports.Action=J;exports.AlertDialog=u;exports.AlertDialogAction=_;exports.AlertDialogCancel=C;exports.AlertDialogContent=f;exports.AlertDialogDescription=y;exports.AlertDialogOverlay=v;exports.AlertDialogPortal=D;exports.AlertDialogTitle=m;exports.AlertDialogTrigger=A;exports.Cancel=K;exports.Content=V;exports.Description=U;exports.Overlay=H;exports.Portal=B;exports.Root=k;exports.Title=Q;exports.Trigger=z;
//# sourceMappingURL=index.cjs52.js.map
