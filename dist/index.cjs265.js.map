{"version":3,"file":"index.cjs265.js","sources":["../node_modules/date-fns/max.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link max} function options.\n */\n\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dates - The dates to compare\n *\n * @returns The latest of the dates\n *\n * @example\n * // Which of these dates is the latest?\n * const result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\nexport function max(dates, options) {\n  let result;\n  let context = options?.in;\n\n  dates.forEach((date) => {\n    // Use the first date object as the context function\n    if (!context && typeof date === \"object\")\n      context = constructFrom.bind(null, date);\n\n    const date_ = toDate(date, context);\n    if (!result || result < date_ || isNaN(+date_)) result = date_;\n  });\n\n  return constructFrom(context, result || NaN);\n}\n\n// Fallback for modularized imports:\nexport default max;\n"],"names":["max","dates","options","result","context","date","constructFrom","date_","toDate"],"mappings":"gLAgCO,SAASA,EAAIC,EAAOC,EAAS,CAClC,IAAIC,EACAC,EAAUF,GAAS,GAEvB,OAAAD,EAAM,QAASI,GAAS,CAElB,CAACD,GAAW,OAAOC,GAAS,WAC9BD,EAAUE,EAAAA,cAAc,KAAK,KAAMD,CAAI,GAEzC,MAAME,EAAQC,EAAAA,OAAOH,EAAMD,CAAO,GAC9B,CAACD,GAAUA,EAASI,GAAS,MAAM,CAACA,CAAK,KAAGJ,EAASI,EAC3D,CAAC,EAEMD,gBAAcF,EAASD,GAAU,GAAG,CAC7C","x_google_ignoreList":[0]}