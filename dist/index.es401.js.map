{"version":3,"file":"index.es401.js","sources":["../node_modules/lodash/_equalArrays.js"],"sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"],"names":["SetCache","require$$0","arraySome","require$$1","cacheHas","require$$2","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","othLength","arrStacked","othStacked","index","result","seen","arrValue","othValue","compared","othIndex","_equalArrays"],"mappings":";;;;;;;AAAA,MAAIA,IAAWC,EAAA,GACXC,IAAYC,EAAA,GACZC,IAAWC,EAAA,GAGXC,IAAuB,GACvBC,IAAyB;AAe7B,WAASC,EAAYC,GAAOC,GAAOC,GAASC,GAAYC,GAAWC,GAAO;AACxE,QAAIC,IAAYJ,IAAUL,GACtBU,IAAYP,EAAM,QAClBQ,IAAYP,EAAM;AAEtB,QAAIM,KAAaC,KAAa,EAAEF,KAAaE,IAAYD;AACvD,aAAO;AAGT,QAAIE,IAAaJ,EAAM,IAAIL,CAAK,GAC5BU,IAAaL,EAAM,IAAIJ,CAAK;AAChC,QAAIQ,KAAcC;AAChB,aAAOD,KAAcR,KAASS,KAAcV;AAE9C,QAAIW,IAAQ,IACRC,IAAS,IACTC,IAAQX,IAAUJ,IAA0B,IAAIP,MAAW;AAM/D,SAJAc,EAAM,IAAIL,GAAOC,CAAK,GACtBI,EAAM,IAAIJ,GAAOD,CAAK,GAGf,EAAEW,IAAQJ,KAAW;AAC1B,UAAIO,IAAWd,EAAMW,CAAK,GACtBI,IAAWd,EAAMU,CAAK;AAE1B,UAAIR;AACF,YAAIa,IAAWV,IACXH,EAAWY,GAAUD,GAAUH,GAAOV,GAAOD,GAAOK,CAAK,IACzDF,EAAWW,GAAUC,GAAUJ,GAAOX,GAAOC,GAAOI,CAAK;AAE/D,UAAIW,MAAa,QAAW;AAC1B,YAAIA;AACF;AAEF,QAAAJ,IAAS;AACT;AAAA,MACN;AAEI,UAAIC;AACF,YAAI,CAACpB,EAAUQ,GAAO,SAASc,GAAUE,GAAU;AAC7C,cAAI,CAACtB,EAASkB,GAAMI,CAAQ,MACvBH,MAAaC,KAAYX,EAAUU,GAAUC,GAAUb,GAASC,GAAYE,CAAK;AACpF,mBAAOQ,EAAK,KAAKI,CAAQ;AAAA,QAEvC,CAAW,GAAG;AACN,UAAAL,IAAS;AACT;AAAA,QACR;AAAA,iBACe,EACLE,MAAaC,KACXX,EAAUU,GAAUC,GAAUb,GAASC,GAAYE,CAAK,IACzD;AACL,QAAAO,IAAS;AACT;AAAA,MACN;AAAA,IACA;AACE,WAAAP,EAAM,OAAUL,CAAK,GACrBK,EAAM,OAAUJ,CAAK,GACdW;AAAA,EACT;AAEA,SAAAM,IAAiBnB;;","x_google_ignoreList":[0]}