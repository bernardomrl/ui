{"version":3,"file":"index.es174.js","sources":["../node_modules/react-day-picker/dist/esm/useCalendar.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\n/**\n * Provides the calendar object to work with the calendar in custom components.\n *\n * @private\n * @param props - The DayPicker props related to calendar configuration.\n * @param dateLib - The date utility library instance.\n * @returns The calendar object containing displayed days, weeks, months, and\n *   navigation methods.\n */\nexport function useCalendar(props, dateLib) {\n    const [navStart, navEnd] = getNavMonths(props, dateLib);\n    const { startOfMonth, endOfMonth } = dateLib;\n    const initialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n    const [firstMonth, setFirstMonth] = useControlledValue(initialMonth, \n    // initialMonth is always computed from props.month if provided\n    props.month ? initialMonth : undefined);\n    // biome-ignore lint/correctness/useExhaustiveDependencies: change the initial month when the time zone changes.\n    useEffect(() => {\n        const newInitialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n        setFirstMonth(newInitialMonth);\n    }, [props.timeZone]);\n    /** The months displayed in the calendar. */\n    const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n    /** The dates displayed in the calendar. */\n    const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n    /** The Months displayed in the calendar. */\n    const months = getMonths(displayMonths, dates, props, dateLib);\n    /** The Weeks displayed in the calendar. */\n    const weeks = getWeeks(months);\n    /** The Days displayed in the calendar. */\n    const days = getDays(months);\n    const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n    const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n    const { disableNavigation, onMonthChange } = props;\n    const isDayInCalendar = (day) => weeks.some((week) => week.days.some((d) => d.isEqualTo(day)));\n    const goToMonth = (date) => {\n        if (disableNavigation) {\n            return;\n        }\n        let newMonth = startOfMonth(date);\n        // if month is before start, use the first month instead\n        if (navStart && newMonth < startOfMonth(navStart)) {\n            newMonth = startOfMonth(navStart);\n        }\n        // if month is after endMonth, use the last month instead\n        if (navEnd && newMonth > startOfMonth(navEnd)) {\n            newMonth = startOfMonth(navEnd);\n        }\n        setFirstMonth(newMonth);\n        onMonthChange?.(newMonth);\n    };\n    const goToDay = (day) => {\n        // is this check necessary?\n        if (isDayInCalendar(day)) {\n            return;\n        }\n        goToMonth(day.date);\n    };\n    const calendar = {\n        months,\n        weeks,\n        days,\n        navStart,\n        navEnd,\n        previousMonth,\n        nextMonth,\n        goToMonth,\n        goToDay,\n    };\n    return calendar;\n}\n"],"names":["useCalendar","props","dateLib","navStart","navEnd","getNavMonths","startOfMonth","endOfMonth","initialMonth","getInitialMonth","firstMonth","setFirstMonth","useControlledValue","useEffect","newInitialMonth","displayMonths","getDisplayMonths","dates","getDates","months","getMonths","weeks","getWeeks","days","getDays","previousMonth","getPreviousMonth","nextMonth","getNextMonth","disableNavigation","onMonthChange","isDayInCalendar","day","week","d","goToMonth","date","newMonth"],"mappings":";;;;;;;;;;;AAoBO,SAASA,EAAYC,GAAOC,GAAS;AACxC,QAAM,CAACC,GAAUC,CAAM,IAAIC,EAAaJ,GAAOC,CAAO,GAChD,EAAE,cAAAI,GAAc,YAAAC,EAAU,IAAKL,GAC/BM,IAAeC,EAAgBR,GAAOE,GAAUC,GAAQF,CAAO,GAC/D,CAACQ,GAAYC,CAAa,IAAIC;AAAA,IAAmBJ;AAAA;AAAA,IAEvDP,EAAM,QAAQO,IAAe;AAAA,EAAS;AAEtC,EAAAK,EAAU,MAAM;AACZ,UAAMC,IAAkBL,EAAgBR,GAAOE,GAAUC,GAAQF,CAAO;AACxE,IAAAS,EAAcG,CAAe;AAAA,EACjC,GAAG,CAACb,EAAM,QAAQ,CAAC;AAEnB,QAAMc,IAAgBC,EAAiBN,GAAYN,GAAQH,GAAOC,CAAO,GAEnEe,IAAQC,EAASH,GAAed,EAAM,WAAWM,EAAWN,EAAM,QAAQ,IAAI,QAAWA,GAAOC,CAAO,GAEvGiB,IAASC,EAAUL,GAAeE,GAAOhB,GAAOC,CAAO,GAEvDmB,IAAQC,EAASH,CAAM,GAEvBI,IAAOC,EAAQL,CAAM,GACrBM,IAAgBC,EAAiBhB,GAAYP,GAAUF,GAAOC,CAAO,GACrEyB,IAAYC,EAAalB,GAAYN,GAAQH,GAAOC,CAAO,GAC3D,EAAE,mBAAA2B,GAAmB,eAAAC,EAAa,IAAK7B,GACvC8B,IAAkB,CAACC,MAAQX,EAAM,KAAK,CAACY,MAASA,EAAK,KAAK,KAAK,CAACC,MAAMA,EAAE,UAAUF,CAAG,CAAC,CAAC,GACvFG,IAAY,CAACC,MAAS;AACxB,QAAIP;AACA;AAEJ,QAAIQ,IAAW/B,EAAa8B,CAAI;AAEhC,IAAIjC,KAAYkC,IAAW/B,EAAaH,CAAQ,MAC5CkC,IAAW/B,EAAaH,CAAQ,IAGhCC,KAAUiC,IAAW/B,EAAaF,CAAM,MACxCiC,IAAW/B,EAAaF,CAAM,IAElCO,EAAc0B,CAAQ,GACtBP,IAAgBO,CAAQ;AAAA,EAC5B;AAmBA,SAXiB;AAAA,IACb,QAAAlB;AAAA,IACA,OAAAE;AAAA,IACA,MAAAE;AAAA,IACA,UAAApB;AAAA,IACA,QAAAC;AAAA,IACA,eAAAqB;AAAA,IACA,WAAAE;AAAA,IACA,WAAAQ;AAAA,IACA,SAhBY,CAACH,MAAQ;AAErB,MAAID,EAAgBC,CAAG,KAGvBG,EAAUH,EAAI,IAAI;AAAA,IACtB;AAAA,EAWJ;AAEA;","x_google_ignoreList":[0]}