{"version":3,"file":"index.es173.js","sources":["../node_modules/react-day-picker/dist/esm/useAnimation.js"],"sourcesContent":["import { useLayoutEffect, useRef } from \"react\";\nimport { Animation } from \"./UI.js\";\nconst asHtmlElement = (element) => {\n    if (element instanceof HTMLElement)\n        return element;\n    return null;\n};\nconst queryMonthEls = (element) => [\n    ...(element.querySelectorAll(\"[data-animated-month]\") ?? []),\n];\nconst queryMonthEl = (element) => asHtmlElement(element.querySelector(\"[data-animated-month]\"));\nconst queryCaptionEl = (element) => asHtmlElement(element.querySelector(\"[data-animated-caption]\"));\nconst queryWeeksEl = (element) => asHtmlElement(element.querySelector(\"[data-animated-weeks]\"));\nconst queryNavEl = (element) => asHtmlElement(element.querySelector(\"[data-animated-nav]\"));\nconst queryWeekdaysEl = (element) => asHtmlElement(element.querySelector(\"[data-animated-weekdays]\"));\n/**\n * Handles animations for transitioning between months in the DayPicker\n * component.\n *\n * @private\n * @param rootElRef - A reference to the root element of the DayPicker\n *   component.\n * @param enabled - Whether animations are enabled.\n * @param options - Configuration options for the animation, including class\n *   names, months, focused day, and the date utility library.\n */\nexport function useAnimation(rootElRef, enabled, { classNames, months, focused, dateLib, }) {\n    const previousRootElSnapshotRef = useRef(null);\n    const previousMonthsRef = useRef(months);\n    const animatingRef = useRef(false);\n    useLayoutEffect(() => {\n        // get previous months before updating the previous months ref\n        const previousMonths = previousMonthsRef.current;\n        // update previous months ref for next effect trigger\n        previousMonthsRef.current = months;\n        if (!enabled ||\n            !rootElRef.current ||\n            // safety check because the ref can be set to anything by consumers\n            !(rootElRef.current instanceof HTMLElement) ||\n            // validation required for the animation to work as expected\n            months.length === 0 ||\n            previousMonths.length === 0 ||\n            months.length !== previousMonths.length) {\n            return;\n        }\n        const isSameMonth = dateLib.isSameMonth(months[0].date, previousMonths[0].date);\n        const isAfterPreviousMonth = dateLib.isAfter(months[0].date, previousMonths[0].date);\n        const captionAnimationClass = isAfterPreviousMonth\n            ? classNames[Animation.caption_after_enter]\n            : classNames[Animation.caption_before_enter];\n        const weeksAnimationClass = isAfterPreviousMonth\n            ? classNames[Animation.weeks_after_enter]\n            : classNames[Animation.weeks_before_enter];\n        // get previous root element snapshot before updating the snapshot ref\n        const previousRootElSnapshot = previousRootElSnapshotRef.current;\n        // update snapshot for next effect trigger\n        const rootElSnapshot = rootElRef.current.cloneNode(true);\n        if (rootElSnapshot instanceof HTMLElement) {\n            // if this effect is triggered while animating, we need to clean up the new root snapshot\n            // to put it in the same state as when not animating, to correctly animate the next month change\n            const currentMonthElsSnapshot = queryMonthEls(rootElSnapshot);\n            currentMonthElsSnapshot.forEach((currentMonthElSnapshot) => {\n                if (!(currentMonthElSnapshot instanceof HTMLElement))\n                    return;\n                // remove the old month snapshots from the new root snapshot\n                const previousMonthElSnapshot = queryMonthEl(currentMonthElSnapshot);\n                if (previousMonthElSnapshot &&\n                    currentMonthElSnapshot.contains(previousMonthElSnapshot)) {\n                    currentMonthElSnapshot.removeChild(previousMonthElSnapshot);\n                }\n                // remove animation classes from the new month snapshots\n                const captionEl = queryCaptionEl(currentMonthElSnapshot);\n                if (captionEl) {\n                    captionEl.classList.remove(captionAnimationClass);\n                }\n                const weeksEl = queryWeeksEl(currentMonthElSnapshot);\n                if (weeksEl) {\n                    weeksEl.classList.remove(weeksAnimationClass);\n                }\n            });\n            previousRootElSnapshotRef.current = rootElSnapshot;\n        }\n        else {\n            previousRootElSnapshotRef.current = null;\n        }\n        if (animatingRef.current ||\n            isSameMonth ||\n            // skip animation if a day is focused because it can cause issues to the animation and is better for a11y\n            focused) {\n            return;\n        }\n        const previousMonthEls = previousRootElSnapshot instanceof HTMLElement\n            ? queryMonthEls(previousRootElSnapshot)\n            : [];\n        const currentMonthEls = queryMonthEls(rootElRef.current);\n        if (currentMonthEls?.every((el) => el instanceof HTMLElement) &&\n            previousMonthEls &&\n            previousMonthEls.every((el) => el instanceof HTMLElement)) {\n            animatingRef.current = true;\n            const cleanUpFunctions = [];\n            // set isolation to isolate to isolate the stacking context during animation\n            rootElRef.current.style.isolation = \"isolate\";\n            // set z-index to 1 to ensure the nav is clickable over the other elements being animated\n            const navEl = queryNavEl(rootElRef.current);\n            if (navEl) {\n                navEl.style.zIndex = \"1\";\n            }\n            currentMonthEls.forEach((currentMonthEl, index) => {\n                const previousMonthEl = previousMonthEls[index];\n                if (!previousMonthEl) {\n                    return;\n                }\n                // animate new displayed month\n                currentMonthEl.style.position = \"relative\";\n                currentMonthEl.style.overflow = \"hidden\";\n                const captionEl = queryCaptionEl(currentMonthEl);\n                if (captionEl) {\n                    captionEl.classList.add(captionAnimationClass);\n                }\n                const weeksEl = queryWeeksEl(currentMonthEl);\n                if (weeksEl) {\n                    weeksEl.classList.add(weeksAnimationClass);\n                }\n                // animate new displayed month end\n                const cleanUp = () => {\n                    animatingRef.current = false;\n                    if (rootElRef.current) {\n                        rootElRef.current.style.isolation = \"\";\n                    }\n                    if (navEl) {\n                        navEl.style.zIndex = \"\";\n                    }\n                    if (captionEl) {\n                        captionEl.classList.remove(captionAnimationClass);\n                    }\n                    if (weeksEl) {\n                        weeksEl.classList.remove(weeksAnimationClass);\n                    }\n                    currentMonthEl.style.position = \"\";\n                    currentMonthEl.style.overflow = \"\";\n                    if (currentMonthEl.contains(previousMonthEl)) {\n                        currentMonthEl.removeChild(previousMonthEl);\n                    }\n                };\n                cleanUpFunctions.push(cleanUp);\n                // animate old displayed month\n                previousMonthEl.style.pointerEvents = \"none\";\n                previousMonthEl.style.position = \"absolute\";\n                previousMonthEl.style.overflow = \"hidden\";\n                previousMonthEl.setAttribute(\"aria-hidden\", \"true\");\n                // hide the weekdays container of the old month and only the new one\n                const previousWeekdaysEl = queryWeekdaysEl(previousMonthEl);\n                if (previousWeekdaysEl) {\n                    previousWeekdaysEl.style.opacity = \"0\";\n                }\n                const previousCaptionEl = queryCaptionEl(previousMonthEl);\n                if (previousCaptionEl) {\n                    previousCaptionEl.classList.add(isAfterPreviousMonth\n                        ? classNames[Animation.caption_before_exit]\n                        : classNames[Animation.caption_after_exit]);\n                    previousCaptionEl.addEventListener(\"animationend\", cleanUp);\n                }\n                const previousWeeksEl = queryWeeksEl(previousMonthEl);\n                if (previousWeeksEl) {\n                    previousWeeksEl.classList.add(isAfterPreviousMonth\n                        ? classNames[Animation.weeks_before_exit]\n                        : classNames[Animation.weeks_after_exit]);\n                }\n                currentMonthEl.insertBefore(previousMonthEl, currentMonthEl.firstChild);\n            });\n        }\n    });\n}\n"],"names":["asHtmlElement","element","queryMonthEls","queryMonthEl","queryCaptionEl","queryWeeksEl","queryNavEl","queryWeekdaysEl","useAnimation","rootElRef","enabled","classNames","months","focused","dateLib","previousRootElSnapshotRef","useRef","previousMonthsRef","animatingRef","useLayoutEffect","previousMonths","isSameMonth","isAfterPreviousMonth","captionAnimationClass","Animation","weeksAnimationClass","previousRootElSnapshot","rootElSnapshot","currentMonthElSnapshot","previousMonthElSnapshot","captionEl","weeksEl","previousMonthEls","currentMonthEls","el","navEl","currentMonthEl","index","previousMonthEl","cleanUp","previousWeekdaysEl","previousCaptionEl","previousWeeksEl"],"mappings":"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","x_google_ignoreList":[0]}