{"version":3,"file":"index.es458.js","sources":["../node_modules/date-fns/getWeekYear.js"],"sourcesContent":["import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n"],"names":["getWeekYear","date","options","_date","toDate","year","defaultOptions","getDefaultOptions","firstWeekContainsDate","firstWeekOfNextYear","constructFrom","startOfNextYear","startOfWeek","firstWeekOfThisYear","startOfThisYear"],"mappings":";;;;AA2CO,SAASA,EAAYC,GAAMC,GAAS;AACzC,QAAMC,IAAQC,EAAOH,GAAMC,GAAS,EAAE,GAChCG,IAAOF,EAAM,YAAW,GAExBG,IAAiBC,EAAiB,GAClCC,IACJN,GAAS,yBACTA,GAAS,QAAQ,SAAS,yBAC1BI,EAAe,yBACfA,EAAe,QAAQ,SAAS,yBAChC,GAEIG,IAAsBC,EAAcR,GAAS,MAAMD,GAAM,CAAC;AAChE,EAAAQ,EAAoB,YAAYJ,IAAO,GAAG,GAAGG,CAAqB,GAClEC,EAAoB,SAAS,GAAG,GAAG,GAAG,CAAC;AACvC,QAAME,IAAkBC,EAAYH,GAAqBP,CAAO,GAE1DW,IAAsBH,EAAcR,GAAS,MAAMD,GAAM,CAAC;AAChE,EAAAY,EAAoB,YAAYR,GAAM,GAAGG,CAAqB,GAC9DK,EAAoB,SAAS,GAAG,GAAG,GAAG,CAAC;AACvC,QAAMC,IAAkBF,EAAYC,GAAqBX,CAAO;AAEhE,SAAI,CAACC,KAAS,CAACQ,IACNN,IAAO,IACL,CAACF,KAAS,CAACW,IACbT,IAEAA,IAAO;AAElB;","x_google_ignoreList":[0]}