{"version":3,"file":"index.cjs275.js","sources":["../node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js"],"sourcesContent":["import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType, } from \"./typeguards.js\";\n/**\n * Checks if a given date matches at least one of the specified {@link Matcher}.\n *\n * @param date - The date to check.\n * @param matchers - The matchers to check against.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the date matches any of the matchers, otherwise `false`.\n * @group Utilities\n */\nexport function dateMatchModifiers(date, matchers, dateLib = defaultDateLib) {\n    const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;\n    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;\n    return matchersArr.some((matcher) => {\n        if (typeof matcher === \"boolean\") {\n            return matcher;\n        }\n        if (dateLib.isDate(matcher)) {\n            return isSameDay(date, matcher);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.includes(date);\n        }\n        if (isDateRange(matcher)) {\n            return rangeIncludesDate(matcher, date, false, dateLib);\n        }\n        if (isDayOfWeekType(matcher)) {\n            if (!Array.isArray(matcher.dayOfWeek)) {\n                return matcher.dayOfWeek === date.getDay();\n            }\n            return matcher.dayOfWeek.includes(date.getDay());\n        }\n        if (isDateInterval(matcher)) {\n            const diffBefore = differenceInCalendarDays(matcher.before, date);\n            const diffAfter = differenceInCalendarDays(matcher.after, date);\n            const isDayBefore = diffBefore > 0;\n            const isDayAfter = diffAfter < 0;\n            const isClosedInterval = isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return isDayAfter && isDayBefore;\n            }\n            else {\n                return isDayBefore || isDayAfter;\n            }\n        }\n        if (isDateAfterType(matcher)) {\n            return differenceInCalendarDays(date, matcher.after) > 0;\n        }\n        if (isDateBeforeType(matcher)) {\n            return differenceInCalendarDays(matcher.before, date) > 0;\n        }\n        if (typeof matcher === \"function\") {\n            return matcher(date);\n        }\n        return false;\n    });\n}\n/**\n * @private\n * @deprecated Use {@link dateMatchModifiers} instead.\n */\nexport const isMatch = dateMatchModifiers;\n"],"names":["dateMatchModifiers","date","matchers","dateLib","defaultDateLib","matchersArr","isSameDay","differenceInCalendarDays","isAfter","matcher","isDatesArray","isDateRange","rangeIncludesDate","isDayOfWeekType","isDateInterval","diffBefore","diffAfter","isDayBefore","isDayAfter","isDateAfterType","isDateBeforeType"],"mappings":"mLAYO,SAASA,EAAmBC,EAAMC,EAAUC,EAAUC,EAAAA,eAAgB,CACzE,MAAMC,EAAe,MAAM,QAAQH,CAAQ,EAAiBA,EAAb,CAACA,CAAQ,EAClD,CAAE,UAAAI,EAAW,yBAAAC,EAA0B,QAAAC,CAAO,EAAKL,EACzD,OAAOE,EAAY,KAAMI,GAAY,CACjC,GAAI,OAAOA,GAAY,UACnB,OAAOA,EAEX,GAAIN,EAAQ,OAAOM,CAAO,EACtB,OAAOH,EAAUL,EAAMQ,CAAO,EAElC,GAAIC,EAAAA,aAAaD,EAASN,CAAO,EAC7B,OAAOM,EAAQ,SAASR,CAAI,EAEhC,GAAIU,EAAAA,YAAYF,CAAO,EACnB,OAAOG,EAAAA,kBAAkBH,EAASR,EAAM,GAAOE,CAAO,EAE1D,GAAIU,EAAAA,gBAAgBJ,CAAO,EACvB,OAAK,MAAM,QAAQA,EAAQ,SAAS,EAG7BA,EAAQ,UAAU,SAASR,EAAK,OAAM,CAAE,EAFpCQ,EAAQ,YAAcR,EAAK,OAAM,EAIhD,GAAIa,EAAAA,eAAeL,CAAO,EAAG,CACzB,MAAMM,EAAaR,EAAyBE,EAAQ,OAAQR,CAAI,EAC1De,EAAYT,EAAyBE,EAAQ,MAAOR,CAAI,EACxDgB,EAAcF,EAAa,EAC3BG,EAAaF,EAAY,EAE/B,OADyBR,EAAQC,EAAQ,OAAQA,EAAQ,KAAK,EAEnDS,GAAcD,EAGdA,GAAeC,CAE9B,CACA,OAAIC,EAAAA,gBAAgBV,CAAO,EAChBF,EAAyBN,EAAMQ,EAAQ,KAAK,EAAI,EAEvDW,EAAAA,iBAAiBX,CAAO,EACjBF,EAAyBE,EAAQ,OAAQR,CAAI,EAAI,EAExD,OAAOQ,GAAY,WACZA,EAAQR,CAAI,EAEhB,EACX,CAAC,CACL","x_google_ignoreList":[0]}