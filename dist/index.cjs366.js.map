{"version":3,"file":"index.cjs366.js","sources":["../node_modules/react-day-picker/dist/esm/helpers/getFocusableDate.js"],"sourcesContent":["/**\n * Calculates the next date that should be focused in the calendar.\n *\n * This function determines the next focusable date based on the movement\n * direction, constraints, and calendar configuration.\n *\n * @param moveBy The unit of movement (e.g., \"day\", \"week\").\n * @param moveDir The direction of movement (\"before\" or \"after\").\n * @param refDate The reference date from which to calculate the next focusable\n *   date.\n * @param navStart The earliest date the user can navigate to.\n * @param navEnd The latest date the user can navigate to.\n * @param props The DayPicker props, including calendar configuration options.\n * @param dateLib The date library to use for date manipulation.\n * @returns The next focusable date.\n */\nexport function getFocusableDate(moveBy, moveDir, refDate, navStart, navEnd, props, dateLib) {\n    const { ISOWeek, broadcastCalendar } = props;\n    const { addDays, addMonths, addWeeks, addYears, endOfBroadcastWeek, endOfISOWeek, endOfWeek, max, min, startOfBroadcastWeek, startOfISOWeek, startOfWeek, } = dateLib;\n    const moveFns = {\n        day: addDays,\n        week: addWeeks,\n        month: addMonths,\n        year: addYears,\n        startOfWeek: (date) => broadcastCalendar\n            ? startOfBroadcastWeek(date, dateLib)\n            : ISOWeek\n                ? startOfISOWeek(date)\n                : startOfWeek(date),\n        endOfWeek: (date) => broadcastCalendar\n            ? endOfBroadcastWeek(date)\n            : ISOWeek\n                ? endOfISOWeek(date)\n                : endOfWeek(date),\n    };\n    let focusableDate = moveFns[moveBy](refDate, moveDir === \"after\" ? 1 : -1);\n    if (moveDir === \"before\" && navStart) {\n        focusableDate = max([navStart, focusableDate]);\n    }\n    else if (moveDir === \"after\" && navEnd) {\n        focusableDate = min([navEnd, focusableDate]);\n    }\n    return focusableDate;\n}\n"],"names":["getFocusableDate","moveBy","moveDir","refDate","navStart","navEnd","props","dateLib","ISOWeek","broadcastCalendar","addDays","addMonths","addWeeks","addYears","endOfBroadcastWeek","endOfISOWeek","endOfWeek","max","min","startOfBroadcastWeek","startOfISOWeek","startOfWeek","focusableDate","date"],"mappings":"gFAgBO,SAASA,EAAiBC,EAAQC,EAASC,EAASC,EAAUC,EAAQC,EAAOC,EAAS,CACzF,KAAM,CAAE,QAAAC,EAAS,kBAAAC,CAAiB,EAAKH,EACjC,CAAE,QAAAI,EAAS,UAAAC,EAAW,SAAAC,EAAU,SAAAC,EAAU,mBAAAC,EAAoB,aAAAC,EAAc,UAAAC,EAAW,IAAAC,EAAK,IAAAC,EAAK,qBAAAC,EAAsB,eAAAC,EAAgB,YAAAC,CAAW,EAAMd,EAiB9J,IAAIe,EAhBY,CACZ,IAAKZ,EACL,KAAME,EACN,MAAOD,EACP,KAAME,EACN,YAAcU,GAASd,EACjBU,EAAqBI,EAAMhB,CAAO,EAClCC,EACIY,EAAeG,CAAI,EACnBF,EAAYE,CAAI,EAC1B,UAAYA,GAASd,EACfK,EAAmBS,CAAI,EACvBf,EACIO,EAAaQ,CAAI,EACjBP,EAAUO,CAAI,CAChC,EACgCtB,CAAM,EAAEE,EAASD,IAAY,QAAU,EAAI,EAAE,EACzE,OAAIA,IAAY,UAAYE,EACxBkB,EAAgBL,EAAI,CAACb,EAAUkB,CAAa,CAAC,EAExCpB,IAAY,SAAWG,IAC5BiB,EAAgBJ,EAAI,CAACb,EAAQiB,CAAa,CAAC,GAExCA,CACX","x_google_ignoreList":[0]}