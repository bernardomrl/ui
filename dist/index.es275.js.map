{"version":3,"file":"index.es275.js","sources":["../node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js"],"sourcesContent":["import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType, } from \"./typeguards.js\";\n/**\n * Checks if a given date matches at least one of the specified {@link Matcher}.\n *\n * @param date - The date to check.\n * @param matchers - The matchers to check against.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the date matches any of the matchers, otherwise `false`.\n * @group Utilities\n */\nexport function dateMatchModifiers(date, matchers, dateLib = defaultDateLib) {\n    const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;\n    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;\n    return matchersArr.some((matcher) => {\n        if (typeof matcher === \"boolean\") {\n            return matcher;\n        }\n        if (dateLib.isDate(matcher)) {\n            return isSameDay(date, matcher);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.includes(date);\n        }\n        if (isDateRange(matcher)) {\n            return rangeIncludesDate(matcher, date, false, dateLib);\n        }\n        if (isDayOfWeekType(matcher)) {\n            if (!Array.isArray(matcher.dayOfWeek)) {\n                return matcher.dayOfWeek === date.getDay();\n            }\n            return matcher.dayOfWeek.includes(date.getDay());\n        }\n        if (isDateInterval(matcher)) {\n            const diffBefore = differenceInCalendarDays(matcher.before, date);\n            const diffAfter = differenceInCalendarDays(matcher.after, date);\n            const isDayBefore = diffBefore > 0;\n            const isDayAfter = diffAfter < 0;\n            const isClosedInterval = isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return isDayAfter && isDayBefore;\n            }\n            else {\n                return isDayBefore || isDayAfter;\n            }\n        }\n        if (isDateAfterType(matcher)) {\n            return differenceInCalendarDays(date, matcher.after) > 0;\n        }\n        if (isDateBeforeType(matcher)) {\n            return differenceInCalendarDays(matcher.before, date) > 0;\n        }\n        if (typeof matcher === \"function\") {\n            return matcher(date);\n        }\n        return false;\n    });\n}\n/**\n * @private\n * @deprecated Use {@link dateMatchModifiers} instead.\n */\nexport const isMatch = dateMatchModifiers;\n"],"names":["dateMatchModifiers","date","matchers","dateLib","defaultDateLib","matchersArr","isSameDay","differenceInCalendarDays","isAfter","matcher","isDatesArray","isDateRange","rangeIncludesDate","isDayOfWeekType","isDateInterval","diffBefore","diffAfter","isDayBefore","isDayAfter","isDateAfterType","isDateBeforeType"],"mappings":";;;AAYO,SAASA,EAAmBC,GAAMC,GAAUC,IAAUC,GAAgB;AACzE,QAAMC,IAAe,MAAM,QAAQH,CAAQ,IAAiBA,IAAb,CAACA,CAAQ,GAClD,EAAE,WAAAI,GAAW,0BAAAC,GAA0B,SAAAC,EAAO,IAAKL;AACzD,SAAOE,EAAY,KAAK,CAACI,MAAY;AACjC,QAAI,OAAOA,KAAY;AACnB,aAAOA;AAEX,QAAIN,EAAQ,OAAOM,CAAO;AACtB,aAAOH,EAAUL,GAAMQ,CAAO;AAElC,QAAIC,EAAaD,GAASN,CAAO;AAC7B,aAAOM,EAAQ,SAASR,CAAI;AAEhC,QAAIU,EAAYF,CAAO;AACnB,aAAOG,EAAkBH,GAASR,GAAM,IAAOE,CAAO;AAE1D,QAAIU,EAAgBJ,CAAO;AACvB,aAAK,MAAM,QAAQA,EAAQ,SAAS,IAG7BA,EAAQ,UAAU,SAASR,EAAK,OAAM,CAAE,IAFpCQ,EAAQ,cAAcR,EAAK,OAAM;AAIhD,QAAIa,EAAeL,CAAO,GAAG;AACzB,YAAMM,IAAaR,EAAyBE,EAAQ,QAAQR,CAAI,GAC1De,IAAYT,EAAyBE,EAAQ,OAAOR,CAAI,GACxDgB,IAAcF,IAAa,GAC3BG,IAAaF,IAAY;AAE/B,aADyBR,EAAQC,EAAQ,QAAQA,EAAQ,KAAK,IAEnDS,KAAcD,IAGdA,KAAeC;AAAA,IAE9B;AACA,WAAIC,EAAgBV,CAAO,IAChBF,EAAyBN,GAAMQ,EAAQ,KAAK,IAAI,IAEvDW,EAAiBX,CAAO,IACjBF,EAAyBE,EAAQ,QAAQR,CAAI,IAAI,IAExD,OAAOQ,KAAY,aACZA,EAAQR,CAAI,IAEhB;AAAA,EACX,CAAC;AACL;","x_google_ignoreList":[0]}