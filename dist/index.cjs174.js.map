{"version":3,"file":"index.cjs174.js","sources":["../node_modules/react-day-picker/dist/esm/useCalendar.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\n/**\n * Provides the calendar object to work with the calendar in custom components.\n *\n * @private\n * @param props - The DayPicker props related to calendar configuration.\n * @param dateLib - The date utility library instance.\n * @returns The calendar object containing displayed days, weeks, months, and\n *   navigation methods.\n */\nexport function useCalendar(props, dateLib) {\n    const [navStart, navEnd] = getNavMonths(props, dateLib);\n    const { startOfMonth, endOfMonth } = dateLib;\n    const initialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n    const [firstMonth, setFirstMonth] = useControlledValue(initialMonth, \n    // initialMonth is always computed from props.month if provided\n    props.month ? initialMonth : undefined);\n    // biome-ignore lint/correctness/useExhaustiveDependencies: change the initial month when the time zone changes.\n    useEffect(() => {\n        const newInitialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n        setFirstMonth(newInitialMonth);\n    }, [props.timeZone]);\n    /** The months displayed in the calendar. */\n    const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n    /** The dates displayed in the calendar. */\n    const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n    /** The Months displayed in the calendar. */\n    const months = getMonths(displayMonths, dates, props, dateLib);\n    /** The Weeks displayed in the calendar. */\n    const weeks = getWeeks(months);\n    /** The Days displayed in the calendar. */\n    const days = getDays(months);\n    const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n    const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n    const { disableNavigation, onMonthChange } = props;\n    const isDayInCalendar = (day) => weeks.some((week) => week.days.some((d) => d.isEqualTo(day)));\n    const goToMonth = (date) => {\n        if (disableNavigation) {\n            return;\n        }\n        let newMonth = startOfMonth(date);\n        // if month is before start, use the first month instead\n        if (navStart && newMonth < startOfMonth(navStart)) {\n            newMonth = startOfMonth(navStart);\n        }\n        // if month is after endMonth, use the last month instead\n        if (navEnd && newMonth > startOfMonth(navEnd)) {\n            newMonth = startOfMonth(navEnd);\n        }\n        setFirstMonth(newMonth);\n        onMonthChange?.(newMonth);\n    };\n    const goToDay = (day) => {\n        // is this check necessary?\n        if (isDayInCalendar(day)) {\n            return;\n        }\n        goToMonth(day.date);\n    };\n    const calendar = {\n        months,\n        weeks,\n        days,\n        navStart,\n        navEnd,\n        previousMonth,\n        nextMonth,\n        goToMonth,\n        goToDay,\n    };\n    return calendar;\n}\n"],"names":["useCalendar","props","dateLib","navStart","navEnd","getNavMonths","startOfMonth","endOfMonth","initialMonth","getInitialMonth","firstMonth","setFirstMonth","useControlledValue","useEffect","newInitialMonth","displayMonths","getDisplayMonths","dates","getDates","months","getMonths","weeks","getWeeks","days","getDays","previousMonth","getPreviousMonth","nextMonth","getNextMonth","disableNavigation","onMonthChange","isDayInCalendar","day","week","d","goToMonth","date","newMonth"],"mappings":"+ZAoBO,SAASA,EAAYC,EAAOC,EAAS,CACxC,KAAM,CAACC,EAAUC,CAAM,EAAIC,EAAAA,aAAaJ,EAAOC,CAAO,EAChD,CAAE,aAAAI,EAAc,WAAAC,CAAU,EAAKL,EAC/BM,EAAeC,EAAAA,gBAAgBR,EAAOE,EAAUC,EAAQF,CAAO,EAC/D,CAACQ,EAAYC,CAAa,EAAIC,EAAAA,mBAAmBJ,EAEvDP,EAAM,MAAQO,EAAe,MAAS,EAEtCK,EAAAA,UAAU,IAAM,CACZ,MAAMC,EAAkBL,EAAAA,gBAAgBR,EAAOE,EAAUC,EAAQF,CAAO,EACxES,EAAcG,CAAe,CACjC,EAAG,CAACb,EAAM,QAAQ,CAAC,EAEnB,MAAMc,EAAgBC,EAAAA,iBAAiBN,EAAYN,EAAQH,EAAOC,CAAO,EAEnEe,EAAQC,EAAAA,SAASH,EAAed,EAAM,SAAWM,EAAWN,EAAM,QAAQ,EAAI,OAAWA,EAAOC,CAAO,EAEvGiB,EAASC,EAAAA,UAAUL,EAAeE,EAAOhB,EAAOC,CAAO,EAEvDmB,EAAQC,EAAAA,SAASH,CAAM,EAEvBI,EAAOC,EAAAA,QAAQL,CAAM,EACrBM,EAAgBC,EAAAA,iBAAiBhB,EAAYP,EAAUF,EAAOC,CAAO,EACrEyB,EAAYC,EAAAA,aAAalB,EAAYN,EAAQH,EAAOC,CAAO,EAC3D,CAAE,kBAAA2B,EAAmB,cAAAC,CAAa,EAAK7B,EACvC8B,EAAmBC,GAAQX,EAAM,KAAMY,GAASA,EAAK,KAAK,KAAMC,GAAMA,EAAE,UAAUF,CAAG,CAAC,CAAC,EACvFG,EAAaC,GAAS,CACxB,GAAIP,EACA,OAEJ,IAAIQ,EAAW/B,EAAa8B,CAAI,EAE5BjC,GAAYkC,EAAW/B,EAAaH,CAAQ,IAC5CkC,EAAW/B,EAAaH,CAAQ,GAGhCC,GAAUiC,EAAW/B,EAAaF,CAAM,IACxCiC,EAAW/B,EAAaF,CAAM,GAElCO,EAAc0B,CAAQ,EACtBP,IAAgBO,CAAQ,CAC5B,EAmBA,MAXiB,CACb,OAAAlB,EACA,MAAAE,EACA,KAAAE,EACA,SAAApB,EACA,OAAAC,EACA,cAAAqB,EACA,UAAAE,EACA,UAAAQ,EACA,QAhBaH,GAAQ,CAEjBD,EAAgBC,CAAG,GAGvBG,EAAUH,EAAI,IAAI,CACtB,CAWJ,CAEA","x_google_ignoreList":[0]}