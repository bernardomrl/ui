{"version":3,"file":"index.es179.js","sources":["../node_modules/react-day-picker/dist/esm/utils/typeguards.js"],"sourcesContent":["/**\n * Checks if the given value is of type {@link DateInterval}.\n *\n * @param matcher - The value to check.\n * @returns `true` if the value is a {@link DateInterval}, otherwise `false`.\n * @group Utilities\n */\nexport function isDateInterval(matcher) {\n    return Boolean(matcher &&\n        typeof matcher === \"object\" &&\n        \"before\" in matcher &&\n        \"after\" in matcher);\n}\n/**\n * Checks if the given value is of type {@link DateRange}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateRange}, otherwise `false`.\n * @group Utilities\n */\nexport function isDateRange(value) {\n    return Boolean(value && typeof value === \"object\" && \"from\" in value);\n}\n/**\n * Checks if the given value is of type {@link DateAfter}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateAfter}, otherwise `false`.\n * @group Utilities\n */\nexport function isDateAfterType(value) {\n    return Boolean(value && typeof value === \"object\" && \"after\" in value);\n}\n/**\n * Checks if the given value is of type {@link DateBefore}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateBefore}, otherwise `false`.\n * @group Utilities\n */\nexport function isDateBeforeType(value) {\n    return Boolean(value && typeof value === \"object\" && \"before\" in value);\n}\n/**\n * Checks if the given value is of type {@link DayOfWeek}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DayOfWeek}, otherwise `false`.\n * @group Utilities\n */\nexport function isDayOfWeekType(value) {\n    return Boolean(value && typeof value === \"object\" && \"dayOfWeek\" in value);\n}\n/**\n * Checks if the given value is an array of valid dates.\n *\n * @private\n * @param value - The value to check.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the value is an array of valid dates, otherwise `false`.\n */\nexport function isDatesArray(value, dateLib) {\n    return Array.isArray(value) && value.every(dateLib.isDate);\n}\n"],"names":["isDateInterval","matcher","isDateRange","value","isDateAfterType","isDateBeforeType","isDayOfWeekType","isDatesArray","dateLib"],"mappings":"AAOO,SAASA,EAAeC,GAAS;AACpC,SAAO,GAAQA,KACX,OAAOA,KAAY,YACnB,YAAYA,KACZ,WAAWA;AACnB;AAQO,SAASC,EAAYC,GAAO;AAC/B,SAAO,GAAQA,KAAS,OAAOA,KAAU,YAAY,UAAUA;AACnE;AAQO,SAASC,EAAgBD,GAAO;AACnC,SAAO,GAAQA,KAAS,OAAOA,KAAU,YAAY,WAAWA;AACpE;AAQO,SAASE,EAAiBF,GAAO;AACpC,SAAO,GAAQA,KAAS,OAAOA,KAAU,YAAY,YAAYA;AACrE;AAQO,SAASG,EAAgBH,GAAO;AACnC,SAAO,GAAQA,KAAS,OAAOA,KAAU,YAAY,eAAeA;AACxE;AASO,SAASI,EAAaJ,GAAOK,GAAS;AACzC,SAAO,MAAM,QAAQL,CAAK,KAAKA,EAAM,MAAMK,EAAQ,MAAM;AAC7D;","x_google_ignoreList":[0]}