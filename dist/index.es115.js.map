{"version":3,"file":"index.es115.js","sources":["../node_modules/embla-carousel/esm/embla-carousel.esm.js"],"sourcesContent":["function isNumber(subject) {\n  return typeof subject === 'number';\n}\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\nfunction isBoolean(subject) {\n  return typeof subject === 'boolean';\n}\nfunction isObject(subject) {\n  return Object.prototype.toString.call(subject) === '[object Object]';\n}\nfunction mathAbs(n) {\n  return Math.abs(n);\n}\nfunction mathSign(n) {\n  return Math.sign(n);\n}\nfunction deltaAbs(valueB, valueA) {\n  return mathAbs(valueB - valueA);\n}\nfunction factorAbs(valueB, valueA) {\n  if (valueB === 0 || valueA === 0) return 0;\n  if (mathAbs(valueB) <= mathAbs(valueA)) return 0;\n  const diff = deltaAbs(mathAbs(valueB), mathAbs(valueA));\n  return mathAbs(diff / valueB);\n}\nfunction roundToTwoDecimals(num) {\n  return Math.round(num * 100) / 100;\n}\nfunction arrayKeys(array) {\n  return objectKeys(array).map(Number);\n}\nfunction arrayLast(array) {\n  return array[arrayLastIndex(array)];\n}\nfunction arrayLastIndex(array) {\n  return Math.max(0, array.length - 1);\n}\nfunction arrayIsLastIndex(array, index) {\n  return index === arrayLastIndex(array);\n}\nfunction arrayFromNumber(n, startAt = 0) {\n  return Array.from(Array(n), (_, i) => startAt + i);\n}\nfunction objectKeys(object) {\n  return Object.keys(object);\n}\nfunction objectsMergeDeep(objectA, objectB) {\n  return [objectA, objectB].reduce((mergedObjects, currentObject) => {\n    objectKeys(currentObject).forEach(key => {\n      const valueA = mergedObjects[key];\n      const valueB = currentObject[key];\n      const areObjects = isObject(valueA) && isObject(valueB);\n      mergedObjects[key] = areObjects ? objectsMergeDeep(valueA, valueB) : valueB;\n    });\n    return mergedObjects;\n  }, {});\n}\nfunction isMouseEvent(evt, ownerWindow) {\n  return typeof ownerWindow.MouseEvent !== 'undefined' && evt instanceof ownerWindow.MouseEvent;\n}\n\nfunction Alignment(align, viewSize) {\n  const predefined = {\n    start,\n    center,\n    end\n  };\n  function start() {\n    return 0;\n  }\n  function center(n) {\n    return end(n) / 2;\n  }\n  function end(n) {\n    return viewSize - n;\n  }\n  function measure(n, index) {\n    if (isString(align)) return predefined[align](n);\n    return align(viewSize, n, index);\n  }\n  const self = {\n    measure\n  };\n  return self;\n}\n\nfunction EventStore() {\n  let listeners = [];\n  function add(node, type, handler, options = {\n    passive: true\n  }) {\n    let removeListener;\n    if ('addEventListener' in node) {\n      node.addEventListener(type, handler, options);\n      removeListener = () => node.removeEventListener(type, handler, options);\n    } else {\n      const legacyMediaQueryList = node;\n      legacyMediaQueryList.addListener(handler);\n      removeListener = () => legacyMediaQueryList.removeListener(handler);\n    }\n    listeners.push(removeListener);\n    return self;\n  }\n  function clear() {\n    listeners = listeners.filter(remove => remove());\n  }\n  const self = {\n    add,\n    clear\n  };\n  return self;\n}\n\nfunction Animations(ownerDocument, ownerWindow, update, render) {\n  const documentVisibleHandler = EventStore();\n  const fixedTimeStep = 1000 / 60;\n  let lastTimeStamp = null;\n  let accumulatedTime = 0;\n  let animationId = 0;\n  function init() {\n    documentVisibleHandler.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.hidden) reset();\n    });\n  }\n  function destroy() {\n    stop();\n    documentVisibleHandler.clear();\n  }\n  function animate(timeStamp) {\n    if (!animationId) return;\n    if (!lastTimeStamp) {\n      lastTimeStamp = timeStamp;\n      update();\n      update();\n    }\n    const timeElapsed = timeStamp - lastTimeStamp;\n    lastTimeStamp = timeStamp;\n    accumulatedTime += timeElapsed;\n    while (accumulatedTime >= fixedTimeStep) {\n      update();\n      accumulatedTime -= fixedTimeStep;\n    }\n    const alpha = accumulatedTime / fixedTimeStep;\n    render(alpha);\n    if (animationId) {\n      animationId = ownerWindow.requestAnimationFrame(animate);\n    }\n  }\n  function start() {\n    if (animationId) return;\n    animationId = ownerWindow.requestAnimationFrame(animate);\n  }\n  function stop() {\n    ownerWindow.cancelAnimationFrame(animationId);\n    lastTimeStamp = null;\n    accumulatedTime = 0;\n    animationId = 0;\n  }\n  function reset() {\n    lastTimeStamp = null;\n    accumulatedTime = 0;\n  }\n  const self = {\n    init,\n    destroy,\n    start,\n    stop,\n    update,\n    render\n  };\n  return self;\n}\n\nfunction Axis(axis, contentDirection) {\n  const isRightToLeft = contentDirection === 'rtl';\n  const isVertical = axis === 'y';\n  const scroll = isVertical ? 'y' : 'x';\n  const cross = isVertical ? 'x' : 'y';\n  const sign = !isVertical && isRightToLeft ? -1 : 1;\n  const startEdge = getStartEdge();\n  const endEdge = getEndEdge();\n  function measureSize(nodeRect) {\n    const {\n      height,\n      width\n    } = nodeRect;\n    return isVertical ? height : width;\n  }\n  function getStartEdge() {\n    if (isVertical) return 'top';\n    return isRightToLeft ? 'right' : 'left';\n  }\n  function getEndEdge() {\n    if (isVertical) return 'bottom';\n    return isRightToLeft ? 'left' : 'right';\n  }\n  function direction(n) {\n    return n * sign;\n  }\n  const self = {\n    scroll,\n    cross,\n    startEdge,\n    endEdge,\n    measureSize,\n    direction\n  };\n  return self;\n}\n\nfunction Limit(min = 0, max = 0) {\n  const length = mathAbs(min - max);\n  function reachedMin(n) {\n    return n < min;\n  }\n  function reachedMax(n) {\n    return n > max;\n  }\n  function reachedAny(n) {\n    return reachedMin(n) || reachedMax(n);\n  }\n  function constrain(n) {\n    if (!reachedAny(n)) return n;\n    return reachedMin(n) ? min : max;\n  }\n  function removeOffset(n) {\n    if (!length) return n;\n    return n - length * Math.ceil((n - max) / length);\n  }\n  const self = {\n    length,\n    max,\n    min,\n    constrain,\n    reachedAny,\n    reachedMax,\n    reachedMin,\n    removeOffset\n  };\n  return self;\n}\n\nfunction Counter(max, start, loop) {\n  const {\n    constrain\n  } = Limit(0, max);\n  const loopEnd = max + 1;\n  let counter = withinLimit(start);\n  function withinLimit(n) {\n    return !loop ? constrain(n) : mathAbs((loopEnd + n) % loopEnd);\n  }\n  function get() {\n    return counter;\n  }\n  function set(n) {\n    counter = withinLimit(n);\n    return self;\n  }\n  function add(n) {\n    return clone().set(get() + n);\n  }\n  function clone() {\n    return Counter(max, get(), loop);\n  }\n  const self = {\n    get,\n    set,\n    add,\n    clone\n  };\n  return self;\n}\n\nfunction DragHandler(axis, rootNode, ownerDocument, ownerWindow, target, dragTracker, location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, baseFriction, watchDrag) {\n  const {\n    cross: crossAxis,\n    direction\n  } = axis;\n  const focusNodes = ['INPUT', 'SELECT', 'TEXTAREA'];\n  const nonPassiveEvent = {\n    passive: false\n  };\n  const initEvents = EventStore();\n  const dragEvents = EventStore();\n  const goToNextThreshold = Limit(50, 225).constrain(percentOfView.measure(20));\n  const snapForceBoost = {\n    mouse: 300,\n    touch: 400\n  };\n  const freeForceBoost = {\n    mouse: 500,\n    touch: 600\n  };\n  const baseSpeed = dragFree ? 43 : 25;\n  let isMoving = false;\n  let startScroll = 0;\n  let startCross = 0;\n  let pointerIsDown = false;\n  let preventScroll = false;\n  let preventClick = false;\n  let isMouse = false;\n  function init(emblaApi) {\n    if (!watchDrag) return;\n    function downIfAllowed(evt) {\n      if (isBoolean(watchDrag) || watchDrag(emblaApi, evt)) down(evt);\n    }\n    const node = rootNode;\n    initEvents.add(node, 'dragstart', evt => evt.preventDefault(), nonPassiveEvent).add(node, 'touchmove', () => undefined, nonPassiveEvent).add(node, 'touchend', () => undefined).add(node, 'touchstart', downIfAllowed).add(node, 'mousedown', downIfAllowed).add(node, 'touchcancel', up).add(node, 'contextmenu', up).add(node, 'click', click, true);\n  }\n  function destroy() {\n    initEvents.clear();\n    dragEvents.clear();\n  }\n  function addDragEvents() {\n    const node = isMouse ? ownerDocument : rootNode;\n    dragEvents.add(node, 'touchmove', move, nonPassiveEvent).add(node, 'touchend', up).add(node, 'mousemove', move, nonPassiveEvent).add(node, 'mouseup', up);\n  }\n  function isFocusNode(node) {\n    const nodeName = node.nodeName || '';\n    return focusNodes.includes(nodeName);\n  }\n  function forceBoost() {\n    const boost = dragFree ? freeForceBoost : snapForceBoost;\n    const type = isMouse ? 'mouse' : 'touch';\n    return boost[type];\n  }\n  function allowedForce(force, targetChanged) {\n    const next = index.add(mathSign(force) * -1);\n    const baseForce = scrollTarget.byDistance(force, !dragFree).distance;\n    if (dragFree || mathAbs(force) < goToNextThreshold) return baseForce;\n    if (skipSnaps && targetChanged) return baseForce * 0.5;\n    return scrollTarget.byIndex(next.get(), 0).distance;\n  }\n  function down(evt) {\n    const isMouseEvt = isMouseEvent(evt, ownerWindow);\n    isMouse = isMouseEvt;\n    preventClick = dragFree && isMouseEvt && !evt.buttons && isMoving;\n    isMoving = deltaAbs(target.get(), location.get()) >= 2;\n    if (isMouseEvt && evt.button !== 0) return;\n    if (isFocusNode(evt.target)) return;\n    pointerIsDown = true;\n    dragTracker.pointerDown(evt);\n    scrollBody.useFriction(0).useDuration(0);\n    target.set(location);\n    addDragEvents();\n    startScroll = dragTracker.readPoint(evt);\n    startCross = dragTracker.readPoint(evt, crossAxis);\n    eventHandler.emit('pointerDown');\n  }\n  function move(evt) {\n    const isTouchEvt = !isMouseEvent(evt, ownerWindow);\n    if (isTouchEvt && evt.touches.length >= 2) return up(evt);\n    const lastScroll = dragTracker.readPoint(evt);\n    const lastCross = dragTracker.readPoint(evt, crossAxis);\n    const diffScroll = deltaAbs(lastScroll, startScroll);\n    const diffCross = deltaAbs(lastCross, startCross);\n    if (!preventScroll && !isMouse) {\n      if (!evt.cancelable) return up(evt);\n      preventScroll = diffScroll > diffCross;\n      if (!preventScroll) return up(evt);\n    }\n    const diff = dragTracker.pointerMove(evt);\n    if (diffScroll > dragThreshold) preventClick = true;\n    scrollBody.useFriction(0.3).useDuration(0.75);\n    animation.start();\n    target.add(direction(diff));\n    evt.preventDefault();\n  }\n  function up(evt) {\n    const currentLocation = scrollTarget.byDistance(0, false);\n    const targetChanged = currentLocation.index !== index.get();\n    const rawForce = dragTracker.pointerUp(evt) * forceBoost();\n    const force = allowedForce(direction(rawForce), targetChanged);\n    const forceFactor = factorAbs(rawForce, force);\n    const speed = baseSpeed - 10 * forceFactor;\n    const friction = baseFriction + forceFactor / 50;\n    preventScroll = false;\n    pointerIsDown = false;\n    dragEvents.clear();\n    scrollBody.useDuration(speed).useFriction(friction);\n    scrollTo.distance(force, !dragFree);\n    isMouse = false;\n    eventHandler.emit('pointerUp');\n  }\n  function click(evt) {\n    if (preventClick) {\n      evt.stopPropagation();\n      evt.preventDefault();\n      preventClick = false;\n    }\n  }\n  function pointerDown() {\n    return pointerIsDown;\n  }\n  const self = {\n    init,\n    destroy,\n    pointerDown\n  };\n  return self;\n}\n\nfunction DragTracker(axis, ownerWindow) {\n  const logInterval = 170;\n  let startEvent;\n  let lastEvent;\n  function readTime(evt) {\n    return evt.timeStamp;\n  }\n  function readPoint(evt, evtAxis) {\n    const property = evtAxis || axis.scroll;\n    const coord = `client${property === 'x' ? 'X' : 'Y'}`;\n    return (isMouseEvent(evt, ownerWindow) ? evt : evt.touches[0])[coord];\n  }\n  function pointerDown(evt) {\n    startEvent = evt;\n    lastEvent = evt;\n    return readPoint(evt);\n  }\n  function pointerMove(evt) {\n    const diff = readPoint(evt) - readPoint(lastEvent);\n    const expired = readTime(evt) - readTime(startEvent) > logInterval;\n    lastEvent = evt;\n    if (expired) startEvent = evt;\n    return diff;\n  }\n  function pointerUp(evt) {\n    if (!startEvent || !lastEvent) return 0;\n    const diffDrag = readPoint(lastEvent) - readPoint(startEvent);\n    const diffTime = readTime(evt) - readTime(startEvent);\n    const expired = readTime(evt) - readTime(lastEvent) > logInterval;\n    const force = diffDrag / diffTime;\n    const isFlick = diffTime && !expired && mathAbs(force) > 0.1;\n    return isFlick ? force : 0;\n  }\n  const self = {\n    pointerDown,\n    pointerMove,\n    pointerUp,\n    readPoint\n  };\n  return self;\n}\n\nfunction NodeRects() {\n  function measure(node) {\n    const {\n      offsetTop,\n      offsetLeft,\n      offsetWidth,\n      offsetHeight\n    } = node;\n    const offset = {\n      top: offsetTop,\n      right: offsetLeft + offsetWidth,\n      bottom: offsetTop + offsetHeight,\n      left: offsetLeft,\n      width: offsetWidth,\n      height: offsetHeight\n    };\n    return offset;\n  }\n  const self = {\n    measure\n  };\n  return self;\n}\n\nfunction PercentOfView(viewSize) {\n  function measure(n) {\n    return viewSize * (n / 100);\n  }\n  const self = {\n    measure\n  };\n  return self;\n}\n\nfunction ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects) {\n  const observeNodes = [container].concat(slides);\n  let resizeObserver;\n  let containerSize;\n  let slideSizes = [];\n  let destroyed = false;\n  function readSize(node) {\n    return axis.measureSize(nodeRects.measure(node));\n  }\n  function init(emblaApi) {\n    if (!watchResize) return;\n    containerSize = readSize(container);\n    slideSizes = slides.map(readSize);\n    function defaultCallback(entries) {\n      for (const entry of entries) {\n        if (destroyed) return;\n        const isContainer = entry.target === container;\n        const slideIndex = slides.indexOf(entry.target);\n        const lastSize = isContainer ? containerSize : slideSizes[slideIndex];\n        const newSize = readSize(isContainer ? container : slides[slideIndex]);\n        const diffSize = mathAbs(newSize - lastSize);\n        if (diffSize >= 0.5) {\n          emblaApi.reInit();\n          eventHandler.emit('resize');\n          break;\n        }\n      }\n    }\n    resizeObserver = new ResizeObserver(entries => {\n      if (isBoolean(watchResize) || watchResize(emblaApi, entries)) {\n        defaultCallback(entries);\n      }\n    });\n    ownerWindow.requestAnimationFrame(() => {\n      observeNodes.forEach(node => resizeObserver.observe(node));\n    });\n  }\n  function destroy() {\n    destroyed = true;\n    if (resizeObserver) resizeObserver.disconnect();\n  }\n  const self = {\n    init,\n    destroy\n  };\n  return self;\n}\n\nfunction ScrollBody(location, offsetLocation, previousLocation, target, baseDuration, baseFriction) {\n  let scrollVelocity = 0;\n  let scrollDirection = 0;\n  let scrollDuration = baseDuration;\n  let scrollFriction = baseFriction;\n  let rawLocation = location.get();\n  let rawLocationPrevious = 0;\n  function seek() {\n    const displacement = target.get() - location.get();\n    const isInstant = !scrollDuration;\n    let scrollDistance = 0;\n    if (isInstant) {\n      scrollVelocity = 0;\n      previousLocation.set(target);\n      location.set(target);\n      scrollDistance = displacement;\n    } else {\n      previousLocation.set(location);\n      scrollVelocity += displacement / scrollDuration;\n      scrollVelocity *= scrollFriction;\n      rawLocation += scrollVelocity;\n      location.add(scrollVelocity);\n      scrollDistance = rawLocation - rawLocationPrevious;\n    }\n    scrollDirection = mathSign(scrollDistance);\n    rawLocationPrevious = rawLocation;\n    return self;\n  }\n  function settled() {\n    const diff = target.get() - offsetLocation.get();\n    return mathAbs(diff) < 0.001;\n  }\n  function duration() {\n    return scrollDuration;\n  }\n  function direction() {\n    return scrollDirection;\n  }\n  function velocity() {\n    return scrollVelocity;\n  }\n  function useBaseDuration() {\n    return useDuration(baseDuration);\n  }\n  function useBaseFriction() {\n    return useFriction(baseFriction);\n  }\n  function useDuration(n) {\n    scrollDuration = n;\n    return self;\n  }\n  function useFriction(n) {\n    scrollFriction = n;\n    return self;\n  }\n  const self = {\n    direction,\n    duration,\n    velocity,\n    seek,\n    settled,\n    useBaseFriction,\n    useBaseDuration,\n    useFriction,\n    useDuration\n  };\n  return self;\n}\n\nfunction ScrollBounds(limit, location, target, scrollBody, percentOfView) {\n  const pullBackThreshold = percentOfView.measure(10);\n  const edgeOffsetTolerance = percentOfView.measure(50);\n  const frictionLimit = Limit(0.1, 0.99);\n  let disabled = false;\n  function shouldConstrain() {\n    if (disabled) return false;\n    if (!limit.reachedAny(target.get())) return false;\n    if (!limit.reachedAny(location.get())) return false;\n    return true;\n  }\n  function constrain(pointerDown) {\n    if (!shouldConstrain()) return;\n    const edge = limit.reachedMin(location.get()) ? 'min' : 'max';\n    const diffToEdge = mathAbs(limit[edge] - location.get());\n    const diffToTarget = target.get() - location.get();\n    const friction = frictionLimit.constrain(diffToEdge / edgeOffsetTolerance);\n    target.subtract(diffToTarget * friction);\n    if (!pointerDown && mathAbs(diffToTarget) < pullBackThreshold) {\n      target.set(limit.constrain(target.get()));\n      scrollBody.useDuration(25).useBaseFriction();\n    }\n  }\n  function toggleActive(active) {\n    disabled = !active;\n  }\n  const self = {\n    shouldConstrain,\n    constrain,\n    toggleActive\n  };\n  return self;\n}\n\nfunction ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance) {\n  const scrollBounds = Limit(-contentSize + viewSize, 0);\n  const snapsBounded = measureBounded();\n  const scrollContainLimit = findScrollContainLimit();\n  const snapsContained = measureContained();\n  function usePixelTolerance(bound, snap) {\n    return deltaAbs(bound, snap) <= 1;\n  }\n  function findScrollContainLimit() {\n    const startSnap = snapsBounded[0];\n    const endSnap = arrayLast(snapsBounded);\n    const min = snapsBounded.lastIndexOf(startSnap);\n    const max = snapsBounded.indexOf(endSnap) + 1;\n    return Limit(min, max);\n  }\n  function measureBounded() {\n    return snapsAligned.map((snapAligned, index) => {\n      const {\n        min,\n        max\n      } = scrollBounds;\n      const snap = scrollBounds.constrain(snapAligned);\n      const isFirst = !index;\n      const isLast = arrayIsLastIndex(snapsAligned, index);\n      if (isFirst) return max;\n      if (isLast) return min;\n      if (usePixelTolerance(min, snap)) return min;\n      if (usePixelTolerance(max, snap)) return max;\n      return snap;\n    }).map(scrollBound => parseFloat(scrollBound.toFixed(3)));\n  }\n  function measureContained() {\n    if (contentSize <= viewSize + pixelTolerance) return [scrollBounds.max];\n    if (containScroll === 'keepSnaps') return snapsBounded;\n    const {\n      min,\n      max\n    } = scrollContainLimit;\n    return snapsBounded.slice(min, max);\n  }\n  const self = {\n    snapsContained,\n    scrollContainLimit\n  };\n  return self;\n}\n\nfunction ScrollLimit(contentSize, scrollSnaps, loop) {\n  const max = scrollSnaps[0];\n  const min = loop ? max - contentSize : arrayLast(scrollSnaps);\n  const limit = Limit(min, max);\n  const self = {\n    limit\n  };\n  return self;\n}\n\nfunction ScrollLooper(contentSize, limit, location, vectors) {\n  const jointSafety = 0.1;\n  const min = limit.min + jointSafety;\n  const max = limit.max + jointSafety;\n  const {\n    reachedMin,\n    reachedMax\n  } = Limit(min, max);\n  function shouldLoop(direction) {\n    if (direction === 1) return reachedMax(location.get());\n    if (direction === -1) return reachedMin(location.get());\n    return false;\n  }\n  function loop(direction) {\n    if (!shouldLoop(direction)) return;\n    const loopDistance = contentSize * (direction * -1);\n    vectors.forEach(v => v.add(loopDistance));\n  }\n  const self = {\n    loop\n  };\n  return self;\n}\n\nfunction ScrollProgress(limit) {\n  const {\n    max,\n    length\n  } = limit;\n  function get(n) {\n    const currentLocation = n - max;\n    return length ? currentLocation / -length : 0;\n  }\n  const self = {\n    get\n  };\n  return self;\n}\n\nfunction ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll) {\n  const {\n    startEdge,\n    endEdge\n  } = axis;\n  const {\n    groupSlides\n  } = slidesToScroll;\n  const alignments = measureSizes().map(alignment.measure);\n  const snaps = measureUnaligned();\n  const snapsAligned = measureAligned();\n  function measureSizes() {\n    return groupSlides(slideRects).map(rects => arrayLast(rects)[endEdge] - rects[0][startEdge]).map(mathAbs);\n  }\n  function measureUnaligned() {\n    return slideRects.map(rect => containerRect[startEdge] - rect[startEdge]).map(snap => -mathAbs(snap));\n  }\n  function measureAligned() {\n    return groupSlides(snaps).map(g => g[0]).map((snap, index) => snap + alignments[index]);\n  }\n  const self = {\n    snaps,\n    snapsAligned\n  };\n  return self;\n}\n\nfunction SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes) {\n  const {\n    groupSlides\n  } = slidesToScroll;\n  const {\n    min,\n    max\n  } = scrollContainLimit;\n  const slideRegistry = createSlideRegistry();\n  function createSlideRegistry() {\n    const groupedSlideIndexes = groupSlides(slideIndexes);\n    const doNotContain = !containSnaps || containScroll === 'keepSnaps';\n    if (scrollSnaps.length === 1) return [slideIndexes];\n    if (doNotContain) return groupedSlideIndexes;\n    return groupedSlideIndexes.slice(min, max).map((group, index, groups) => {\n      const isFirst = !index;\n      const isLast = arrayIsLastIndex(groups, index);\n      if (isFirst) {\n        const range = arrayLast(groups[0]) + 1;\n        return arrayFromNumber(range);\n      }\n      if (isLast) {\n        const range = arrayLastIndex(slideIndexes) - arrayLast(groups)[0] + 1;\n        return arrayFromNumber(range, arrayLast(groups)[0]);\n      }\n      return group;\n    });\n  }\n  const self = {\n    slideRegistry\n  };\n  return self;\n}\n\nfunction ScrollTarget(loop, scrollSnaps, contentSize, limit, targetVector) {\n  const {\n    reachedAny,\n    removeOffset,\n    constrain\n  } = limit;\n  function minDistance(distances) {\n    return distances.concat().sort((a, b) => mathAbs(a) - mathAbs(b))[0];\n  }\n  function findTargetSnap(target) {\n    const distance = loop ? removeOffset(target) : constrain(target);\n    const ascDiffsToSnaps = scrollSnaps.map((snap, index) => ({\n      diff: shortcut(snap - distance, 0),\n      index\n    })).sort((d1, d2) => mathAbs(d1.diff) - mathAbs(d2.diff));\n    const {\n      index\n    } = ascDiffsToSnaps[0];\n    return {\n      index,\n      distance\n    };\n  }\n  function shortcut(target, direction) {\n    const targets = [target, target + contentSize, target - contentSize];\n    if (!loop) return target;\n    if (!direction) return minDistance(targets);\n    const matchingTargets = targets.filter(t => mathSign(t) === direction);\n    if (matchingTargets.length) return minDistance(matchingTargets);\n    return arrayLast(targets) - contentSize;\n  }\n  function byIndex(index, direction) {\n    const diffToSnap = scrollSnaps[index] - targetVector.get();\n    const distance = shortcut(diffToSnap, direction);\n    return {\n      index,\n      distance\n    };\n  }\n  function byDistance(distance, snap) {\n    const target = targetVector.get() + distance;\n    const {\n      index,\n      distance: targetSnapDistance\n    } = findTargetSnap(target);\n    const reachedBound = !loop && reachedAny(target);\n    if (!snap || reachedBound) return {\n      index,\n      distance\n    };\n    const diffToSnap = scrollSnaps[index] - targetSnapDistance;\n    const snapDistance = distance + shortcut(diffToSnap, 0);\n    return {\n      index,\n      distance: snapDistance\n    };\n  }\n  const self = {\n    byDistance,\n    byIndex,\n    shortcut\n  };\n  return self;\n}\n\nfunction ScrollTo(animation, indexCurrent, indexPrevious, scrollBody, scrollTarget, targetVector, eventHandler) {\n  function scrollTo(target) {\n    const distanceDiff = target.distance;\n    const indexDiff = target.index !== indexCurrent.get();\n    targetVector.add(distanceDiff);\n    if (distanceDiff) {\n      if (scrollBody.duration()) {\n        animation.start();\n      } else {\n        animation.update();\n        animation.render(1);\n        animation.update();\n      }\n    }\n    if (indexDiff) {\n      indexPrevious.set(indexCurrent.get());\n      indexCurrent.set(target.index);\n      eventHandler.emit('select');\n    }\n  }\n  function distance(n, snap) {\n    const target = scrollTarget.byDistance(n, snap);\n    scrollTo(target);\n  }\n  function index(n, direction) {\n    const targetIndex = indexCurrent.clone().set(n);\n    const target = scrollTarget.byIndex(targetIndex.get(), direction);\n    scrollTo(target);\n  }\n  const self = {\n    distance,\n    index\n  };\n  return self;\n}\n\nfunction SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore, eventHandler, watchFocus) {\n  const focusListenerOptions = {\n    passive: true,\n    capture: true\n  };\n  let lastTabPressTime = 0;\n  function init(emblaApi) {\n    if (!watchFocus) return;\n    function defaultCallback(index) {\n      const nowTime = new Date().getTime();\n      const diffTime = nowTime - lastTabPressTime;\n      if (diffTime > 10) return;\n      eventHandler.emit('slideFocusStart');\n      root.scrollLeft = 0;\n      const group = slideRegistry.findIndex(group => group.includes(index));\n      if (!isNumber(group)) return;\n      scrollBody.useDuration(0);\n      scrollTo.index(group, 0);\n      eventHandler.emit('slideFocus');\n    }\n    eventStore.add(document, 'keydown', registerTabPress, false);\n    slides.forEach((slide, slideIndex) => {\n      eventStore.add(slide, 'focus', evt => {\n        if (isBoolean(watchFocus) || watchFocus(emblaApi, evt)) {\n          defaultCallback(slideIndex);\n        }\n      }, focusListenerOptions);\n    });\n  }\n  function registerTabPress(event) {\n    if (event.code === 'Tab') lastTabPressTime = new Date().getTime();\n  }\n  const self = {\n    init\n  };\n  return self;\n}\n\nfunction Vector1D(initialValue) {\n  let value = initialValue;\n  function get() {\n    return value;\n  }\n  function set(n) {\n    value = normalizeInput(n);\n  }\n  function add(n) {\n    value += normalizeInput(n);\n  }\n  function subtract(n) {\n    value -= normalizeInput(n);\n  }\n  function normalizeInput(n) {\n    return isNumber(n) ? n : n.get();\n  }\n  const self = {\n    get,\n    set,\n    add,\n    subtract\n  };\n  return self;\n}\n\nfunction Translate(axis, container) {\n  const translate = axis.scroll === 'x' ? x : y;\n  const containerStyle = container.style;\n  let previousTarget = null;\n  let disabled = false;\n  function x(n) {\n    return `translate3d(${n}px,0px,0px)`;\n  }\n  function y(n) {\n    return `translate3d(0px,${n}px,0px)`;\n  }\n  function to(target) {\n    if (disabled) return;\n    const newTarget = roundToTwoDecimals(axis.direction(target));\n    if (newTarget === previousTarget) return;\n    containerStyle.transform = translate(newTarget);\n    previousTarget = newTarget;\n  }\n  function toggleActive(active) {\n    disabled = !active;\n  }\n  function clear() {\n    if (disabled) return;\n    containerStyle.transform = '';\n    if (!container.getAttribute('style')) container.removeAttribute('style');\n  }\n  const self = {\n    clear,\n    to,\n    toggleActive\n  };\n  return self;\n}\n\nfunction SlideLooper(axis, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, location, slides) {\n  const roundingSafety = 0.5;\n  const ascItems = arrayKeys(slideSizesWithGaps);\n  const descItems = arrayKeys(slideSizesWithGaps).reverse();\n  const loopPoints = startPoints().concat(endPoints());\n  function removeSlideSizes(indexes, from) {\n    return indexes.reduce((a, i) => {\n      return a - slideSizesWithGaps[i];\n    }, from);\n  }\n  function slidesInGap(indexes, gap) {\n    return indexes.reduce((a, i) => {\n      const remainingGap = removeSlideSizes(a, gap);\n      return remainingGap > 0 ? a.concat([i]) : a;\n    }, []);\n  }\n  function findSlideBounds(offset) {\n    return snaps.map((snap, index) => ({\n      start: snap - slideSizes[index] + roundingSafety + offset,\n      end: snap + viewSize - roundingSafety + offset\n    }));\n  }\n  function findLoopPoints(indexes, offset, isEndEdge) {\n    const slideBounds = findSlideBounds(offset);\n    return indexes.map(index => {\n      const initial = isEndEdge ? 0 : -contentSize;\n      const altered = isEndEdge ? contentSize : 0;\n      const boundEdge = isEndEdge ? 'end' : 'start';\n      const loopPoint = slideBounds[index][boundEdge];\n      return {\n        index,\n        loopPoint,\n        slideLocation: Vector1D(-1),\n        translate: Translate(axis, slides[index]),\n        target: () => location.get() > loopPoint ? initial : altered\n      };\n    });\n  }\n  function startPoints() {\n    const gap = scrollSnaps[0];\n    const indexes = slidesInGap(descItems, gap);\n    return findLoopPoints(indexes, contentSize, false);\n  }\n  function endPoints() {\n    const gap = viewSize - scrollSnaps[0] - 1;\n    const indexes = slidesInGap(ascItems, gap);\n    return findLoopPoints(indexes, -contentSize, true);\n  }\n  function canLoop() {\n    return loopPoints.every(({\n      index\n    }) => {\n      const otherIndexes = ascItems.filter(i => i !== index);\n      return removeSlideSizes(otherIndexes, viewSize) <= 0.1;\n    });\n  }\n  function loop() {\n    loopPoints.forEach(loopPoint => {\n      const {\n        target,\n        translate,\n        slideLocation\n      } = loopPoint;\n      const shiftLocation = target();\n      if (shiftLocation === slideLocation.get()) return;\n      translate.to(shiftLocation);\n      slideLocation.set(shiftLocation);\n    });\n  }\n  function clear() {\n    loopPoints.forEach(loopPoint => loopPoint.translate.clear());\n  }\n  const self = {\n    canLoop,\n    clear,\n    loop,\n    loopPoints\n  };\n  return self;\n}\n\nfunction SlidesHandler(container, eventHandler, watchSlides) {\n  let mutationObserver;\n  let destroyed = false;\n  function init(emblaApi) {\n    if (!watchSlides) return;\n    function defaultCallback(mutations) {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList') {\n          emblaApi.reInit();\n          eventHandler.emit('slidesChanged');\n          break;\n        }\n      }\n    }\n    mutationObserver = new MutationObserver(mutations => {\n      if (destroyed) return;\n      if (isBoolean(watchSlides) || watchSlides(emblaApi, mutations)) {\n        defaultCallback(mutations);\n      }\n    });\n    mutationObserver.observe(container, {\n      childList: true\n    });\n  }\n  function destroy() {\n    if (mutationObserver) mutationObserver.disconnect();\n    destroyed = true;\n  }\n  const self = {\n    init,\n    destroy\n  };\n  return self;\n}\n\nfunction SlidesInView(container, slides, eventHandler, threshold) {\n  const intersectionEntryMap = {};\n  let inViewCache = null;\n  let notInViewCache = null;\n  let intersectionObserver;\n  let destroyed = false;\n  function init() {\n    intersectionObserver = new IntersectionObserver(entries => {\n      if (destroyed) return;\n      entries.forEach(entry => {\n        const index = slides.indexOf(entry.target);\n        intersectionEntryMap[index] = entry;\n      });\n      inViewCache = null;\n      notInViewCache = null;\n      eventHandler.emit('slidesInView');\n    }, {\n      root: container.parentElement,\n      threshold\n    });\n    slides.forEach(slide => intersectionObserver.observe(slide));\n  }\n  function destroy() {\n    if (intersectionObserver) intersectionObserver.disconnect();\n    destroyed = true;\n  }\n  function createInViewList(inView) {\n    return objectKeys(intersectionEntryMap).reduce((list, slideIndex) => {\n      const index = parseInt(slideIndex);\n      const {\n        isIntersecting\n      } = intersectionEntryMap[index];\n      const inViewMatch = inView && isIntersecting;\n      const notInViewMatch = !inView && !isIntersecting;\n      if (inViewMatch || notInViewMatch) list.push(index);\n      return list;\n    }, []);\n  }\n  function get(inView = true) {\n    if (inView && inViewCache) return inViewCache;\n    if (!inView && notInViewCache) return notInViewCache;\n    const slideIndexes = createInViewList(inView);\n    if (inView) inViewCache = slideIndexes;\n    if (!inView) notInViewCache = slideIndexes;\n    return slideIndexes;\n  }\n  const self = {\n    init,\n    destroy,\n    get\n  };\n  return self;\n}\n\nfunction SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow) {\n  const {\n    measureSize,\n    startEdge,\n    endEdge\n  } = axis;\n  const withEdgeGap = slideRects[0] && readEdgeGap;\n  const startGap = measureStartGap();\n  const endGap = measureEndGap();\n  const slideSizes = slideRects.map(measureSize);\n  const slideSizesWithGaps = measureWithGaps();\n  function measureStartGap() {\n    if (!withEdgeGap) return 0;\n    const slideRect = slideRects[0];\n    return mathAbs(containerRect[startEdge] - slideRect[startEdge]);\n  }\n  function measureEndGap() {\n    if (!withEdgeGap) return 0;\n    const style = ownerWindow.getComputedStyle(arrayLast(slides));\n    return parseFloat(style.getPropertyValue(`margin-${endEdge}`));\n  }\n  function measureWithGaps() {\n    return slideRects.map((rect, index, rects) => {\n      const isFirst = !index;\n      const isLast = arrayIsLastIndex(rects, index);\n      if (isFirst) return slideSizes[index] + startGap;\n      if (isLast) return slideSizes[index] + endGap;\n      return rects[index + 1][startEdge] - rect[startEdge];\n    }).map(mathAbs);\n  }\n  const self = {\n    slideSizes,\n    slideSizesWithGaps,\n    startGap,\n    endGap\n  };\n  return self;\n}\n\nfunction SlidesToScroll(axis, viewSize, slidesToScroll, loop, containerRect, slideRects, startGap, endGap, pixelTolerance) {\n  const {\n    startEdge,\n    endEdge,\n    direction\n  } = axis;\n  const groupByNumber = isNumber(slidesToScroll);\n  function byNumber(array, groupSize) {\n    return arrayKeys(array).filter(i => i % groupSize === 0).map(i => array.slice(i, i + groupSize));\n  }\n  function bySize(array) {\n    if (!array.length) return [];\n    return arrayKeys(array).reduce((groups, rectB, index) => {\n      const rectA = arrayLast(groups) || 0;\n      const isFirst = rectA === 0;\n      const isLast = rectB === arrayLastIndex(array);\n      const edgeA = containerRect[startEdge] - slideRects[rectA][startEdge];\n      const edgeB = containerRect[startEdge] - slideRects[rectB][endEdge];\n      const gapA = !loop && isFirst ? direction(startGap) : 0;\n      const gapB = !loop && isLast ? direction(endGap) : 0;\n      const chunkSize = mathAbs(edgeB - gapB - (edgeA + gapA));\n      if (index && chunkSize > viewSize + pixelTolerance) groups.push(rectB);\n      if (isLast) groups.push(array.length);\n      return groups;\n    }, []).map((currentSize, index, groups) => {\n      const previousSize = Math.max(groups[index - 1] || 0);\n      return array.slice(previousSize, currentSize);\n    });\n  }\n  function groupSlides(array) {\n    return groupByNumber ? byNumber(array, slidesToScroll) : bySize(array);\n  }\n  const self = {\n    groupSlides\n  };\n  return self;\n}\n\nfunction Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler) {\n  // Options\n  const {\n    align,\n    axis: scrollAxis,\n    direction,\n    startIndex,\n    loop,\n    duration,\n    dragFree,\n    dragThreshold,\n    inViewThreshold,\n    slidesToScroll: groupSlides,\n    skipSnaps,\n    containScroll,\n    watchResize,\n    watchSlides,\n    watchDrag,\n    watchFocus\n  } = options;\n  // Measurements\n  const pixelTolerance = 2;\n  const nodeRects = NodeRects();\n  const containerRect = nodeRects.measure(container);\n  const slideRects = slides.map(nodeRects.measure);\n  const axis = Axis(scrollAxis, direction);\n  const viewSize = axis.measureSize(containerRect);\n  const percentOfView = PercentOfView(viewSize);\n  const alignment = Alignment(align, viewSize);\n  const containSnaps = !loop && !!containScroll;\n  const readEdgeGap = loop || !!containScroll;\n  const {\n    slideSizes,\n    slideSizesWithGaps,\n    startGap,\n    endGap\n  } = SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow);\n  const slidesToScroll = SlidesToScroll(axis, viewSize, groupSlides, loop, containerRect, slideRects, startGap, endGap, pixelTolerance);\n  const {\n    snaps,\n    snapsAligned\n  } = ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll);\n  const contentSize = -arrayLast(snaps) + arrayLast(slideSizesWithGaps);\n  const {\n    snapsContained,\n    scrollContainLimit\n  } = ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance);\n  const scrollSnaps = containSnaps ? snapsContained : snapsAligned;\n  const {\n    limit\n  } = ScrollLimit(contentSize, scrollSnaps, loop);\n  // Indexes\n  const index = Counter(arrayLastIndex(scrollSnaps), startIndex, loop);\n  const indexPrevious = index.clone();\n  const slideIndexes = arrayKeys(slides);\n  // Animation\n  const update = ({\n    dragHandler,\n    scrollBody,\n    scrollBounds,\n    options: {\n      loop\n    }\n  }) => {\n    if (!loop) scrollBounds.constrain(dragHandler.pointerDown());\n    scrollBody.seek();\n  };\n  const render = ({\n    scrollBody,\n    translate,\n    location,\n    offsetLocation,\n    previousLocation,\n    scrollLooper,\n    slideLooper,\n    dragHandler,\n    animation,\n    eventHandler,\n    scrollBounds,\n    options: {\n      loop\n    }\n  }, alpha) => {\n    const shouldSettle = scrollBody.settled();\n    const withinBounds = !scrollBounds.shouldConstrain();\n    const hasSettled = loop ? shouldSettle : shouldSettle && withinBounds;\n    const hasSettledAndIdle = hasSettled && !dragHandler.pointerDown();\n    if (hasSettledAndIdle) animation.stop();\n    const interpolatedLocation = location.get() * alpha + previousLocation.get() * (1 - alpha);\n    offsetLocation.set(interpolatedLocation);\n    if (loop) {\n      scrollLooper.loop(scrollBody.direction());\n      slideLooper.loop();\n    }\n    translate.to(offsetLocation.get());\n    if (hasSettledAndIdle) eventHandler.emit('settle');\n    if (!hasSettled) eventHandler.emit('scroll');\n  };\n  const animation = Animations(ownerDocument, ownerWindow, () => update(engine), alpha => render(engine, alpha));\n  // Shared\n  const friction = 0.68;\n  const startLocation = scrollSnaps[index.get()];\n  const location = Vector1D(startLocation);\n  const previousLocation = Vector1D(startLocation);\n  const offsetLocation = Vector1D(startLocation);\n  const target = Vector1D(startLocation);\n  const scrollBody = ScrollBody(location, offsetLocation, previousLocation, target, duration, friction);\n  const scrollTarget = ScrollTarget(loop, scrollSnaps, contentSize, limit, target);\n  const scrollTo = ScrollTo(animation, index, indexPrevious, scrollBody, scrollTarget, target, eventHandler);\n  const scrollProgress = ScrollProgress(limit);\n  const eventStore = EventStore();\n  const slidesInView = SlidesInView(container, slides, eventHandler, inViewThreshold);\n  const {\n    slideRegistry\n  } = SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes);\n  const slideFocus = SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore, eventHandler, watchFocus);\n  // Engine\n  const engine = {\n    ownerDocument,\n    ownerWindow,\n    eventHandler,\n    containerRect,\n    slideRects,\n    animation,\n    axis,\n    dragHandler: DragHandler(axis, root, ownerDocument, ownerWindow, target, DragTracker(axis, ownerWindow), location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, friction, watchDrag),\n    eventStore,\n    percentOfView,\n    index,\n    indexPrevious,\n    limit,\n    location,\n    offsetLocation,\n    previousLocation,\n    options,\n    resizeHandler: ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects),\n    scrollBody,\n    scrollBounds: ScrollBounds(limit, offsetLocation, target, scrollBody, percentOfView),\n    scrollLooper: ScrollLooper(contentSize, limit, offsetLocation, [location, offsetLocation, previousLocation, target]),\n    scrollProgress,\n    scrollSnapList: scrollSnaps.map(scrollProgress.get),\n    scrollSnaps,\n    scrollTarget,\n    scrollTo,\n    slideLooper: SlideLooper(axis, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, offsetLocation, slides),\n    slideFocus,\n    slidesHandler: SlidesHandler(container, eventHandler, watchSlides),\n    slidesInView,\n    slideIndexes,\n    slideRegistry,\n    slidesToScroll,\n    target,\n    translate: Translate(axis, container)\n  };\n  return engine;\n}\n\nfunction EventHandler() {\n  let listeners = {};\n  let api;\n  function init(emblaApi) {\n    api = emblaApi;\n  }\n  function getListeners(evt) {\n    return listeners[evt] || [];\n  }\n  function emit(evt) {\n    getListeners(evt).forEach(e => e(api, evt));\n    return self;\n  }\n  function on(evt, cb) {\n    listeners[evt] = getListeners(evt).concat([cb]);\n    return self;\n  }\n  function off(evt, cb) {\n    listeners[evt] = getListeners(evt).filter(e => e !== cb);\n    return self;\n  }\n  function clear() {\n    listeners = {};\n  }\n  const self = {\n    init,\n    emit,\n    off,\n    on,\n    clear\n  };\n  return self;\n}\n\nconst defaultOptions = {\n  align: 'center',\n  axis: 'x',\n  container: null,\n  slides: null,\n  containScroll: 'trimSnaps',\n  direction: 'ltr',\n  slidesToScroll: 1,\n  inViewThreshold: 0,\n  breakpoints: {},\n  dragFree: false,\n  dragThreshold: 10,\n  loop: false,\n  skipSnaps: false,\n  duration: 25,\n  startIndex: 0,\n  active: true,\n  watchDrag: true,\n  watchResize: true,\n  watchSlides: true,\n  watchFocus: true\n};\n\nfunction OptionsHandler(ownerWindow) {\n  function mergeOptions(optionsA, optionsB) {\n    return objectsMergeDeep(optionsA, optionsB || {});\n  }\n  function optionsAtMedia(options) {\n    const optionsAtMedia = options.breakpoints || {};\n    const matchedMediaOptions = objectKeys(optionsAtMedia).filter(media => ownerWindow.matchMedia(media).matches).map(media => optionsAtMedia[media]).reduce((a, mediaOption) => mergeOptions(a, mediaOption), {});\n    return mergeOptions(options, matchedMediaOptions);\n  }\n  function optionsMediaQueries(optionsList) {\n    return optionsList.map(options => objectKeys(options.breakpoints || {})).reduce((acc, mediaQueries) => acc.concat(mediaQueries), []).map(ownerWindow.matchMedia);\n  }\n  const self = {\n    mergeOptions,\n    optionsAtMedia,\n    optionsMediaQueries\n  };\n  return self;\n}\n\nfunction PluginsHandler(optionsHandler) {\n  let activePlugins = [];\n  function init(emblaApi, plugins) {\n    activePlugins = plugins.filter(({\n      options\n    }) => optionsHandler.optionsAtMedia(options).active !== false);\n    activePlugins.forEach(plugin => plugin.init(emblaApi, optionsHandler));\n    return plugins.reduce((map, plugin) => Object.assign(map, {\n      [plugin.name]: plugin\n    }), {});\n  }\n  function destroy() {\n    activePlugins = activePlugins.filter(plugin => plugin.destroy());\n  }\n  const self = {\n    init,\n    destroy\n  };\n  return self;\n}\n\nfunction EmblaCarousel(root, userOptions, userPlugins) {\n  const ownerDocument = root.ownerDocument;\n  const ownerWindow = ownerDocument.defaultView;\n  const optionsHandler = OptionsHandler(ownerWindow);\n  const pluginsHandler = PluginsHandler(optionsHandler);\n  const mediaHandlers = EventStore();\n  const eventHandler = EventHandler();\n  const {\n    mergeOptions,\n    optionsAtMedia,\n    optionsMediaQueries\n  } = optionsHandler;\n  const {\n    on,\n    off,\n    emit\n  } = eventHandler;\n  const reInit = reActivate;\n  let destroyed = false;\n  let engine;\n  let optionsBase = mergeOptions(defaultOptions, EmblaCarousel.globalOptions);\n  let options = mergeOptions(optionsBase);\n  let pluginList = [];\n  let pluginApis;\n  let container;\n  let slides;\n  function storeElements() {\n    const {\n      container: userContainer,\n      slides: userSlides\n    } = options;\n    const customContainer = isString(userContainer) ? root.querySelector(userContainer) : userContainer;\n    container = customContainer || root.children[0];\n    const customSlides = isString(userSlides) ? container.querySelectorAll(userSlides) : userSlides;\n    slides = [].slice.call(customSlides || container.children);\n  }\n  function createEngine(options) {\n    const engine = Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler);\n    if (options.loop && !engine.slideLooper.canLoop()) {\n      const optionsWithoutLoop = Object.assign({}, options, {\n        loop: false\n      });\n      return createEngine(optionsWithoutLoop);\n    }\n    return engine;\n  }\n  function activate(withOptions, withPlugins) {\n    if (destroyed) return;\n    optionsBase = mergeOptions(optionsBase, withOptions);\n    options = optionsAtMedia(optionsBase);\n    pluginList = withPlugins || pluginList;\n    storeElements();\n    engine = createEngine(options);\n    optionsMediaQueries([optionsBase, ...pluginList.map(({\n      options\n    }) => options)]).forEach(query => mediaHandlers.add(query, 'change', reActivate));\n    if (!options.active) return;\n    engine.translate.to(engine.location.get());\n    engine.animation.init();\n    engine.slidesInView.init();\n    engine.slideFocus.init(self);\n    engine.eventHandler.init(self);\n    engine.resizeHandler.init(self);\n    engine.slidesHandler.init(self);\n    if (engine.options.loop) engine.slideLooper.loop();\n    if (container.offsetParent && slides.length) engine.dragHandler.init(self);\n    pluginApis = pluginsHandler.init(self, pluginList);\n  }\n  function reActivate(withOptions, withPlugins) {\n    const startIndex = selectedScrollSnap();\n    deActivate();\n    activate(mergeOptions({\n      startIndex\n    }, withOptions), withPlugins);\n    eventHandler.emit('reInit');\n  }\n  function deActivate() {\n    engine.dragHandler.destroy();\n    engine.eventStore.clear();\n    engine.translate.clear();\n    engine.slideLooper.clear();\n    engine.resizeHandler.destroy();\n    engine.slidesHandler.destroy();\n    engine.slidesInView.destroy();\n    engine.animation.destroy();\n    pluginsHandler.destroy();\n    mediaHandlers.clear();\n  }\n  function destroy() {\n    if (destroyed) return;\n    destroyed = true;\n    mediaHandlers.clear();\n    deActivate();\n    eventHandler.emit('destroy');\n    eventHandler.clear();\n  }\n  function scrollTo(index, jump, direction) {\n    if (!options.active || destroyed) return;\n    engine.scrollBody.useBaseFriction().useDuration(jump === true ? 0 : options.duration);\n    engine.scrollTo.index(index, direction || 0);\n  }\n  function scrollNext(jump) {\n    const next = engine.index.add(1).get();\n    scrollTo(next, jump, -1);\n  }\n  function scrollPrev(jump) {\n    const prev = engine.index.add(-1).get();\n    scrollTo(prev, jump, 1);\n  }\n  function canScrollNext() {\n    const next = engine.index.add(1).get();\n    return next !== selectedScrollSnap();\n  }\n  function canScrollPrev() {\n    const prev = engine.index.add(-1).get();\n    return prev !== selectedScrollSnap();\n  }\n  function scrollSnapList() {\n    return engine.scrollSnapList;\n  }\n  function scrollProgress() {\n    return engine.scrollProgress.get(engine.offsetLocation.get());\n  }\n  function selectedScrollSnap() {\n    return engine.index.get();\n  }\n  function previousScrollSnap() {\n    return engine.indexPrevious.get();\n  }\n  function slidesInView() {\n    return engine.slidesInView.get();\n  }\n  function slidesNotInView() {\n    return engine.slidesInView.get(false);\n  }\n  function plugins() {\n    return pluginApis;\n  }\n  function internalEngine() {\n    return engine;\n  }\n  function rootNode() {\n    return root;\n  }\n  function containerNode() {\n    return container;\n  }\n  function slideNodes() {\n    return slides;\n  }\n  const self = {\n    canScrollNext,\n    canScrollPrev,\n    containerNode,\n    internalEngine,\n    destroy,\n    off,\n    on,\n    emit,\n    plugins,\n    previousScrollSnap,\n    reInit,\n    rootNode,\n    scrollNext,\n    scrollPrev,\n    scrollProgress,\n    scrollSnapList,\n    scrollTo,\n    selectedScrollSnap,\n    slideNodes,\n    slidesInView,\n    slidesNotInView\n  };\n  activate(userOptions, userPlugins);\n  setTimeout(() => eventHandler.emit('init'), 0);\n  return self;\n}\nEmblaCarousel.globalOptions = undefined;\n\nexport { EmblaCarousel as default };\n//# sourceMappingURL=embla-carousel.esm.js.map\n"],"names":["isNumber","subject","isString","isBoolean","isObject","mathAbs","n","mathSign","deltaAbs","valueB","valueA","factorAbs","diff","roundToTwoDecimals","num","arrayKeys","array","objectKeys","arrayLast","arrayLastIndex","arrayIsLastIndex","index","arrayFromNumber","startAt","_","i","object","objectsMergeDeep","objectA","objectB","mergedObjects","currentObject","key","areObjects","isMouseEvent","evt","ownerWindow","Alignment","align","viewSize","predefined","start","center","end","measure","EventStore","listeners","add","node","type","handler","options","removeListener","legacyMediaQueryList","self","clear","remove","Animations","ownerDocument","update","render","documentVisibleHandler","fixedTimeStep","lastTimeStamp","accumulatedTime","animationId","init","reset","destroy","stop","animate","timeStamp","timeElapsed","alpha","Axis","axis","contentDirection","isRightToLeft","isVertical","scroll","cross","sign","startEdge","getStartEdge","endEdge","getEndEdge","measureSize","nodeRect","height","width","direction","Limit","min","max","length","reachedMin","reachedMax","reachedAny","constrain","removeOffset","Counter","loop","loopEnd","counter","withinLimit","get","set","clone","DragHandler","rootNode","target","dragTracker","location","animation","scrollTo","scrollBody","scrollTarget","eventHandler","percentOfView","dragFree","dragThreshold","skipSnaps","baseFriction","watchDrag","crossAxis","focusNodes","nonPassiveEvent","initEvents","dragEvents","goToNextThreshold","snapForceBoost","freeForceBoost","baseSpeed","isMoving","startScroll","startCross","pointerIsDown","preventScroll","preventClick","isMouse","emblaApi","downIfAllowed","down","up","click","addDragEvents","move","isFocusNode","nodeName","forceBoost","allowedForce","force","targetChanged","next","baseForce","isMouseEvt","lastScroll","lastCross","diffScroll","diffCross","rawForce","forceFactor","speed","friction","pointerDown","DragTracker","startEvent","lastEvent","readTime","readPoint","evtAxis","coord","pointerMove","expired","pointerUp","diffDrag","diffTime","NodeRects","offsetTop","offsetLeft","offsetWidth","offsetHeight","PercentOfView","ResizeHandler","container","slides","watchResize","nodeRects","observeNodes","resizeObserver","containerSize","slideSizes","destroyed","readSize","defaultCallback","entries","entry","isContainer","slideIndex","lastSize","newSize","ScrollBody","offsetLocation","previousLocation","baseDuration","scrollVelocity","scrollDirection","scrollDuration","scrollFriction","rawLocation","rawLocationPrevious","seek","displacement","isInstant","scrollDistance","settled","duration","velocity","useBaseDuration","useDuration","useBaseFriction","useFriction","ScrollBounds","limit","pullBackThreshold","edgeOffsetTolerance","frictionLimit","disabled","shouldConstrain","edge","diffToEdge","diffToTarget","toggleActive","active","ScrollContain","contentSize","snapsAligned","containScroll","pixelTolerance","scrollBounds","snapsBounded","measureBounded","scrollContainLimit","findScrollContainLimit","snapsContained","measureContained","usePixelTolerance","bound","snap","startSnap","endSnap","snapAligned","isFirst","isLast","scrollBound","ScrollLimit","scrollSnaps","ScrollLooper","vectors","shouldLoop","loopDistance","v","ScrollProgress","currentLocation","ScrollSnaps","alignment","containerRect","slideRects","slidesToScroll","groupSlides","alignments","measureSizes","snaps","measureUnaligned","measureAligned","rects","rect","g","SlideRegistry","containSnaps","slideIndexes","slideRegistry","createSlideRegistry","groupedSlideIndexes","doNotContain","group","groups","range","ScrollTarget","targetVector","minDistance","distances","a","b","findTargetSnap","distance","ascDiffsToSnaps","shortcut","d1","d2","targets","matchingTargets","t","byIndex","diffToSnap","byDistance","targetSnapDistance","reachedBound","snapDistance","ScrollTo","indexCurrent","indexPrevious","distanceDiff","indexDiff","targetIndex","SlideFocus","root","eventStore","watchFocus","focusListenerOptions","lastTabPressTime","registerTabPress","slide","event","Vector1D","initialValue","value","normalizeInput","subtract","Translate","translate","x","y","containerStyle","previousTarget","to","newTarget","SlideLooper","slideSizesWithGaps","ascItems","descItems","loopPoints","startPoints","endPoints","removeSlideSizes","indexes","from","slidesInGap","gap","findSlideBounds","offset","findLoopPoints","isEndEdge","slideBounds","initial","altered","boundEdge","loopPoint","canLoop","otherIndexes","slideLocation","shiftLocation","SlidesHandler","watchSlides","mutationObserver","mutations","mutation","SlidesInView","threshold","intersectionEntryMap","inViewCache","notInViewCache","intersectionObserver","createInViewList","inView","list","isIntersecting","SlideSizes","readEdgeGap","withEdgeGap","startGap","measureStartGap","endGap","measureEndGap","measureWithGaps","slideRect","style","SlidesToScroll","groupByNumber","byNumber","groupSize","bySize","rectB","rectA","edgeA","edgeB","gapA","gapB","chunkSize","currentSize","previousSize","Engine","scrollAxis","startIndex","inViewThreshold","dragHandler","scrollLooper","slideLooper","shouldSettle","withinBounds","hasSettled","hasSettledAndIdle","interpolatedLocation","engine","startLocation","scrollProgress","slidesInView","slideFocus","EventHandler","api","getListeners","emit","e","on","cb","off","defaultOptions","OptionsHandler","mergeOptions","optionsA","optionsB","optionsAtMedia","matchedMediaOptions","media","mediaOption","optionsMediaQueries","optionsList","acc","mediaQueries","PluginsHandler","optionsHandler","activePlugins","plugins","plugin","map","EmblaCarousel","userOptions","userPlugins","pluginsHandler","mediaHandlers","reInit","reActivate","optionsBase","pluginList","pluginApis","storeElements","userContainer","userSlides","customSlides","createEngine","optionsWithoutLoop","activate","withOptions","withPlugins","query","selectedScrollSnap","deActivate","jump","scrollNext","scrollPrev","prev","canScrollNext","canScrollPrev","scrollSnapList","previousScrollSnap","slidesNotInView","internalEngine","containerNode","slideNodes"],"mappings":"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","x_google_ignoreList":[0]}