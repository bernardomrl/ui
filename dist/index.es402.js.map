{"version":3,"file":"index.es402.js","sources":["../node_modules/lodash/_equalByTag.js"],"sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"],"names":["Symbol","require$$0","Uint8Array","require$$1","eq","require$$2","equalArrays","require$$3","mapToArray","require$$4","setToArray","require$$5","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","symbolValueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","convert","isPartial","stacked","result","_equalByTag"],"mappings":";;;;;;;;;;AAAA,MAAIA,IAASC,EAAA,GACTC,IAAaC,EAAA,GACbC,IAAKC,EAAA,GACLC,IAAcC,EAAA,GACdC,IAAaC,EAAA,GACbC,IAAaC,EAAA,GAGbC,IAAuB,GACvBC,IAAyB,GAGzBC,IAAU,oBACVC,IAAU,iBACVC,IAAW,kBACXC,IAAS,gBACTC,IAAY,mBACZC,IAAY,mBACZC,IAAS,gBACTC,IAAY,mBACZC,IAAY,mBAEZC,IAAiB,wBACjBC,IAAc,qBAGdC,IAAczB,IAASA,EAAO,YAAY,QAC1C0B,IAAgBD,IAAcA,EAAY,UAAU;AAmBxD,WAASE,EAAWC,GAAQC,GAAOC,GAAKC,GAASC,GAAYC,GAAWC,GAAO;AAC7E,YAAQJ,GAAG;AAAA,MACT,KAAKN;AACH,YAAKI,EAAO,cAAcC,EAAM,cAC3BD,EAAO,cAAcC,EAAM;AAC9B,iBAAO;AAET,QAAAD,IAASA,EAAO,QAChBC,IAAQA,EAAM;AAAA,MAEhB,KAAKN;AACH,eAAK,EAAAK,EAAO,cAAcC,EAAM,cAC5B,CAACI,EAAU,IAAI/B,EAAW0B,CAAM,GAAG,IAAI1B,EAAW2B,CAAK,CAAC;AAAA,MAK9D,KAAKf;AAAA,MACL,KAAKC;AAAA,MACL,KAAKG;AAGH,eAAOd,EAAG,CAACwB,GAAQ,CAACC,CAAK;AAAA,MAE3B,KAAKb;AACH,eAAOY,EAAO,QAAQC,EAAM,QAAQD,EAAO,WAAWC,EAAM;AAAA,MAE9D,KAAKV;AAAA,MACL,KAAKE;AAIH,eAAOO,KAAWC,IAAQ;AAAA,MAE5B,KAAKZ;AACH,YAAIkB,IAAU3B;AAAA,MAEhB,KAAKY;AACH,YAAIgB,IAAYL,IAAUnB;AAG1B,YAFAuB,MAAYA,IAAUzB,IAElBkB,EAAO,QAAQC,EAAM,QAAQ,CAACO;AAChC,iBAAO;AAGT,YAAIC,IAAUH,EAAM,IAAIN,CAAM;AAC9B,YAAIS;AACF,iBAAOA,KAAWR;AAEpB,QAAAE,KAAWlB,GAGXqB,EAAM,IAAIN,GAAQC,CAAK;AACvB,YAAIS,IAAShC,EAAY6B,EAAQP,CAAM,GAAGO,EAAQN,CAAK,GAAGE,GAASC,GAAYC,GAAWC,CAAK;AAC/F,eAAAA,EAAM,OAAUN,CAAM,GACfU;AAAA,MAET,KAAKhB;AACH,YAAII;AACF,iBAAOA,EAAc,KAAKE,CAAM,KAAKF,EAAc,KAAKG,CAAK;AAAA,IAErE;AACE,WAAO;AAAA,EACT;AAEA,SAAAU,IAAiBZ;;","x_google_ignoreList":[0]}