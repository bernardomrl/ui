{"version":3,"file":"index.cjs268.js","sources":["../node_modules/date-fns/setYear.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setYear} function options.\n */\n\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param year - The year of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the year set\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\nexport function setYear(date, year, options) {\n  const date_ = toDate(date, options?.in);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+date_)) return constructFrom(options?.in || date, NaN);\n\n  date_.setFullYear(year);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default setYear;\n"],"names":["setYear","date","year","options","date_","toDate","constructFrom"],"mappings":"gLA6BO,SAASA,EAAQC,EAAMC,EAAMC,EAAS,CAC3C,MAAMC,EAAQC,EAAAA,OAAOJ,EAAME,GAAS,EAAE,EAGtC,OAAI,MAAM,CAACC,CAAK,EAAUE,EAAAA,cAA6BL,EAAM,GAAG,GAEhEG,EAAM,YAAYF,CAAI,EACfE,EACT","x_google_ignoreList":[0]}