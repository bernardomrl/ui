{"version":3,"file":"index.es311.js","sources":["../node_modules/lodash/_baseFlatten.js"],"sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"],"names":["arrayPush","require$$0","isFlattenable","require$$1","baseFlatten","array","depth","predicate","isStrict","result","index","length","value","_baseFlatten"],"mappings":";;;;;;AAAA,MAAIA,IAAYC,EAAA,GACZC,IAAgBC,EAAA;AAapB,WAASC,EAAYC,GAAOC,GAAOC,GAAWC,GAAUC,GAAQ;AAC9D,QAAIC,IAAQ,IACRC,IAASN,EAAM;AAKnB,SAHAE,MAAcA,IAAYL,IAC1BO,MAAWA,IAAS,KAEb,EAAEC,IAAQC,KAAQ;AACvB,UAAIC,IAAQP,EAAMK,CAAK;AACvB,MAAIJ,IAAQ,KAAKC,EAAUK,CAAK,IAC1BN,IAAQ,IAEVF,EAAYQ,GAAON,IAAQ,GAAGC,GAAWC,GAAUC,CAAM,IAEzDT,EAAUS,GAAQG,CAAK,IAEfJ,MACVC,EAAOA,EAAO,MAAM,IAAIG;AAAA,IAE9B;AACE,WAAOH;AAAA,EACT;AAEA,SAAAI,IAAiBT;;","x_google_ignoreList":[0]}